//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace CloudPulse
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::CloudPulse.CloudPulse_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace CloudPulse.CloudPulse_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[82];
            _typeNameTable[0] = "CloudPulse.MainPage";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[2] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[3] = "Syncfusion.UI.Xaml.Charts.SfChart3D";
            _typeNameTable[4] = "Syncfusion.UI.Xaml.Charts.ChartBase";
            _typeNameTable[5] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[6] = "Syncfusion.UI.Xaml.Charts.ChartSeries3DCollection";
            _typeNameTable[7] = "System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartSeries3D>";
            _typeNameTable[8] = "System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartSeries3D>";
            _typeNameTable[9] = "Object";
            _typeNameTable[10] = "Syncfusion.UI.Xaml.Charts.ChartSeries3D";
            _typeNameTable[11] = "Syncfusion.UI.Xaml.Charts.ChartSeriesBase";
            _typeNameTable[12] = "Windows.UI.Xaml.Media.Brush";
            _typeNameTable[13] = "Syncfusion.UI.Xaml.Charts.ChartAdornmentInfo3D";
            _typeNameTable[14] = "Syncfusion.UI.Xaml.Charts.ChartAdornmentInfoBase";
            _typeNameTable[15] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[16] = "Int32";
            _typeNameTable[17] = "Syncfusion.UI.Xaml.Charts.SelectionMode";
            _typeNameTable[18] = "System.Enum";
            _typeNameTable[19] = "System.ValueType";
            _typeNameTable[20] = "Boolean";
            _typeNameTable[21] = "Syncfusion.UI.Xaml.Charts.Direction";
            _typeNameTable[22] = "Syncfusion.UI.Xaml.Charts.SortingAxis";
            _typeNameTable[23] = "Windows.UI.Xaml.DataTemplate";
            _typeNameTable[24] = "System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartAdornment>";
            _typeNameTable[25] = "System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartAdornment>";
            _typeNameTable[26] = "Syncfusion.UI.Xaml.Charts.ChartAdornment";
            _typeNameTable[27] = "Syncfusion.UI.Xaml.Charts.ChartSegment";
            _typeNameTable[28] = "Windows.UI.Xaml.Thickness";
            _typeNameTable[29] = "Windows.UI.Xaml.Media.FontFamily";
            _typeNameTable[30] = "Windows.UI.Text.FontStyle";
            _typeNameTable[31] = "Double";
            _typeNameTable[32] = "Syncfusion.UI.Xaml.Charts.DoubleRange";
            _typeNameTable[33] = "Windows.UI.Xaml.Media.DoubleCollection";
            _typeNameTable[34] = "Syncfusion.UI.Xaml.Charts.ChartColorPalette";
            _typeNameTable[35] = "System.Collections.IEnumerable";
            _typeNameTable[36] = "String";
            _typeNameTable[37] = "Syncfusion.UI.Xaml.Charts.ChartLegendIcon";
            _typeNameTable[38] = "Windows.UI.Xaml.Visibility";
            _typeNameTable[39] = "Syncfusion.UI.Xaml.Charts.ChartColorModel";
            _typeNameTable[40] = "TimeSpan";
            _typeNameTable[41] = "Syncfusion.UI.Xaml.Charts.EmptyPointValue";
            _typeNameTable[42] = "Syncfusion.UI.Xaml.Charts.EmptyPointStyle";
            _typeNameTable[43] = "Syncfusion.UI.Xaml.Charts.ChartAxisBase3D";
            _typeNameTable[44] = "Syncfusion.UI.Xaml.Charts.ChartAxis";
            _typeNameTable[45] = "Syncfusion.UI.Xaml.Charts.RangeAxisBase3D";
            _typeNameTable[46] = "Windows.Foundation.Rect";
            _typeNameTable[47] = "Syncfusion.UI.Xaml.Charts.ChartVisibleSeriesCollection";
            _typeNameTable[48] = "System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartSeriesBase>";
            _typeNameTable[49] = "System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartSeriesBase>";
            _typeNameTable[50] = "Syncfusion.UI.Xaml.Charts.ChartColumnDefinitions";
            _typeNameTable[51] = "System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartColumnDefinition>";
            _typeNameTable[52] = "System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartColumnDefinition>";
            _typeNameTable[53] = "Syncfusion.UI.Xaml.Charts.ChartColumnDefinition";
            _typeNameTable[54] = "Syncfusion.UI.Xaml.Charts.ChartUnitType";
            _typeNameTable[55] = "Syncfusion.UI.Xaml.Charts.ChartRowDefinitions";
            _typeNameTable[56] = "System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartRowDefinition>";
            _typeNameTable[57] = "System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartRowDefinition>";
            _typeNameTable[58] = "Syncfusion.UI.Xaml.Charts.ChartRowDefinition";
            _typeNameTable[59] = "Syncfusion.UI.Xaml.Charts.ChartAxisCollection";
            _typeNameTable[60] = "System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartAxis>";
            _typeNameTable[61] = "System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartAxis>";
            _typeNameTable[62] = "Syncfusion.UI.Xaml.Charts.AxisElementPosition";
            _typeNameTable[63] = "Syncfusion.UI.Xaml.Charts.AxisLabelsIntersectAction";
            _typeNameTable[64] = "Windows.UI.Xaml.Style";
            _typeNameTable[65] = "Syncfusion.UI.Xaml.Charts.LabelStyle";
            _typeNameTable[66] = "System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartAxisLabel>";
            _typeNameTable[67] = "System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartAxisLabel>";
            _typeNameTable[68] = "Syncfusion.UI.Xaml.Charts.ChartAxisLabel";
            _typeNameTable[69] = "Syncfusion.UI.Xaml.Charts.EdgeLabelsDrawingMode";
            _typeNameTable[70] = "Syncfusion.UI.Xaml.Charts.EdgeLabelsVisibilityMode";
            _typeNameTable[71] = "Syncfusion.UI.Xaml.Charts.ChartAxisLabelCollection";
            _typeNameTable[72] = "Windows.UI.Xaml.HorizontalAlignment";
            _typeNameTable[73] = "Windows.UI.Xaml.VerticalAlignment";
            _typeNameTable[74] = "Windows.UI.Xaml.UIElement";
            _typeNameTable[75] = "Syncfusion.UI.Xaml.Charts.NumericalAxis3D";
            _typeNameTable[76] = "Syncfusion.UI.Xaml.Charts.NumericalPadding";
            _typeNameTable[77] = "Syncfusion.UI.Xaml.Charts.LineSeries3D";
            _typeNameTable[78] = "Syncfusion.UI.Xaml.Charts.XyDataSeries3D";
            _typeNameTable[79] = "Syncfusion.UI.Xaml.Charts.CartesianSeries3D";
            _typeNameTable[80] = "Syncfusion.UI.Xaml.Charts.LineSegment3D";
            _typeNameTable[81] = "Syncfusion.UI.Xaml.Charts.ChartSegment3D";

            _typeTable = new global::System.Type[82];
            _typeTable[0] = typeof(global::CloudPulse.MainPage);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[3] = typeof(global::Syncfusion.UI.Xaml.Charts.SfChart3D);
            _typeTable[4] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartBase);
            _typeTable[5] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[6] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartSeries3DCollection);
            _typeTable[7] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.Charts.ChartSeries3D>);
            _typeTable[8] = typeof(global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.Charts.ChartSeries3D>);
            _typeTable[9] = typeof(global::System.Object);
            _typeTable[10] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartSeries3D);
            _typeTable[11] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase);
            _typeTable[12] = typeof(global::Windows.UI.Xaml.Media.Brush);
            _typeTable[13] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartAdornmentInfo3D);
            _typeTable[14] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartAdornmentInfoBase);
            _typeTable[15] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[16] = typeof(global::System.Int32);
            _typeTable[17] = typeof(global::Syncfusion.UI.Xaml.Charts.SelectionMode);
            _typeTable[18] = typeof(global::System.Enum);
            _typeTable[19] = typeof(global::System.ValueType);
            _typeTable[20] = typeof(global::System.Boolean);
            _typeTable[21] = typeof(global::Syncfusion.UI.Xaml.Charts.Direction);
            _typeTable[22] = typeof(global::Syncfusion.UI.Xaml.Charts.SortingAxis);
            _typeTable[23] = typeof(global::Windows.UI.Xaml.DataTemplate);
            _typeTable[24] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.Charts.ChartAdornment>);
            _typeTable[25] = typeof(global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.Charts.ChartAdornment>);
            _typeTable[26] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartAdornment);
            _typeTable[27] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartSegment);
            _typeTable[28] = typeof(global::Windows.UI.Xaml.Thickness);
            _typeTable[29] = typeof(global::Windows.UI.Xaml.Media.FontFamily);
            _typeTable[30] = typeof(global::Windows.UI.Text.FontStyle);
            _typeTable[31] = typeof(global::System.Double);
            _typeTable[32] = typeof(global::Syncfusion.UI.Xaml.Charts.DoubleRange);
            _typeTable[33] = typeof(global::Windows.UI.Xaml.Media.DoubleCollection);
            _typeTable[34] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartColorPalette);
            _typeTable[35] = typeof(global::System.Collections.IEnumerable);
            _typeTable[36] = typeof(global::System.String);
            _typeTable[37] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartLegendIcon);
            _typeTable[38] = typeof(global::Windows.UI.Xaml.Visibility);
            _typeTable[39] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartColorModel);
            _typeTable[40] = typeof(global::System.TimeSpan);
            _typeTable[41] = typeof(global::Syncfusion.UI.Xaml.Charts.EmptyPointValue);
            _typeTable[42] = typeof(global::Syncfusion.UI.Xaml.Charts.EmptyPointStyle);
            _typeTable[43] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartAxisBase3D);
            _typeTable[44] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartAxis);
            _typeTable[45] = typeof(global::Syncfusion.UI.Xaml.Charts.RangeAxisBase3D);
            _typeTable[46] = typeof(global::Windows.Foundation.Rect);
            _typeTable[47] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartVisibleSeriesCollection);
            _typeTable[48] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase>);
            _typeTable[49] = typeof(global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase>);
            _typeTable[50] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartColumnDefinitions);
            _typeTable[51] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.Charts.ChartColumnDefinition>);
            _typeTable[52] = typeof(global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.Charts.ChartColumnDefinition>);
            _typeTable[53] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartColumnDefinition);
            _typeTable[54] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartUnitType);
            _typeTable[55] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartRowDefinitions);
            _typeTable[56] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.Charts.ChartRowDefinition>);
            _typeTable[57] = typeof(global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.Charts.ChartRowDefinition>);
            _typeTable[58] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartRowDefinition);
            _typeTable[59] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartAxisCollection);
            _typeTable[60] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.Charts.ChartAxis>);
            _typeTable[61] = typeof(global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.Charts.ChartAxis>);
            _typeTable[62] = typeof(global::Syncfusion.UI.Xaml.Charts.AxisElementPosition);
            _typeTable[63] = typeof(global::Syncfusion.UI.Xaml.Charts.AxisLabelsIntersectAction);
            _typeTable[64] = typeof(global::Windows.UI.Xaml.Style);
            _typeTable[65] = typeof(global::Syncfusion.UI.Xaml.Charts.LabelStyle);
            _typeTable[66] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel>);
            _typeTable[67] = typeof(global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel>);
            _typeTable[68] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel);
            _typeTable[69] = typeof(global::Syncfusion.UI.Xaml.Charts.EdgeLabelsDrawingMode);
            _typeTable[70] = typeof(global::Syncfusion.UI.Xaml.Charts.EdgeLabelsVisibilityMode);
            _typeTable[71] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartAxisLabelCollection);
            _typeTable[72] = typeof(global::Windows.UI.Xaml.HorizontalAlignment);
            _typeTable[73] = typeof(global::Windows.UI.Xaml.VerticalAlignment);
            _typeTable[74] = typeof(global::Windows.UI.Xaml.UIElement);
            _typeTable[75] = typeof(global::Syncfusion.UI.Xaml.Charts.NumericalAxis3D);
            _typeTable[76] = typeof(global::Syncfusion.UI.Xaml.Charts.NumericalPadding);
            _typeTable[77] = typeof(global::Syncfusion.UI.Xaml.Charts.LineSeries3D);
            _typeTable[78] = typeof(global::Syncfusion.UI.Xaml.Charts.XyDataSeries3D);
            _typeTable[79] = typeof(global::Syncfusion.UI.Xaml.Charts.CartesianSeries3D);
            _typeTable[80] = typeof(global::Syncfusion.UI.Xaml.Charts.LineSegment3D);
            _typeTable[81] = typeof(global::Syncfusion.UI.Xaml.Charts.ChartSegment3D);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_MainPage() { return new global::CloudPulse.MainPage(); }
        private object Activate_3_SfChart3D() { return new global::Syncfusion.UI.Xaml.Charts.SfChart3D(); }
        private object Activate_6_ChartSeries3DCollection() { return new global::Syncfusion.UI.Xaml.Charts.ChartSeries3DCollection(); }
        private object Activate_7_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.Charts.ChartSeries3D>(); }
        private object Activate_8_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.Charts.ChartSeries3D>(); }
        private object Activate_13_ChartAdornmentInfo3D() { return new global::Syncfusion.UI.Xaml.Charts.ChartAdornmentInfo3D(); }
        private object Activate_24_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.Charts.ChartAdornment>(); }
        private object Activate_25_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.Charts.ChartAdornment>(); }
        private object Activate_26_ChartAdornment() { return new global::Syncfusion.UI.Xaml.Charts.ChartAdornment(); }
        private object Activate_39_ChartColorModel() { return new global::Syncfusion.UI.Xaml.Charts.ChartColorModel(); }
        private object Activate_47_ChartVisibleSeriesCollection() { return new global::Syncfusion.UI.Xaml.Charts.ChartVisibleSeriesCollection(); }
        private object Activate_48_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase>(); }
        private object Activate_49_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase>(); }
        private object Activate_50_ChartColumnDefinitions() { return new global::Syncfusion.UI.Xaml.Charts.ChartColumnDefinitions(); }
        private object Activate_51_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.Charts.ChartColumnDefinition>(); }
        private object Activate_52_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.Charts.ChartColumnDefinition>(); }
        private object Activate_53_ChartColumnDefinition() { return new global::Syncfusion.UI.Xaml.Charts.ChartColumnDefinition(); }
        private object Activate_55_ChartRowDefinitions() { return new global::Syncfusion.UI.Xaml.Charts.ChartRowDefinitions(); }
        private object Activate_56_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.Charts.ChartRowDefinition>(); }
        private object Activate_57_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.Charts.ChartRowDefinition>(); }
        private object Activate_58_ChartRowDefinition() { return new global::Syncfusion.UI.Xaml.Charts.ChartRowDefinition(); }
        private object Activate_59_ChartAxisCollection() { return new global::Syncfusion.UI.Xaml.Charts.ChartAxisCollection(); }
        private object Activate_60_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.Charts.ChartAxis>(); }
        private object Activate_61_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.Charts.ChartAxis>(); }
        private object Activate_65_LabelStyle() { return new global::Syncfusion.UI.Xaml.Charts.LabelStyle(); }
        private object Activate_66_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel>(); }
        private object Activate_67_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel>(); }
        private object Activate_68_ChartAxisLabel() { return new global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel(); }
        private object Activate_71_ChartAxisLabelCollection() { return new global::Syncfusion.UI.Xaml.Charts.ChartAxisLabelCollection(); }
        private object Activate_75_NumericalAxis3D() { return new global::Syncfusion.UI.Xaml.Charts.NumericalAxis3D(); }
        private object Activate_77_LineSeries3D() { return new global::Syncfusion.UI.Xaml.Charts.LineSeries3D(); }
        private void VectorAdd_6_ChartSeries3DCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartSeries3D>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartSeries3D)item;
            collection.Add(newItem);
        }
        private void VectorAdd_7_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartSeries3D>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartSeries3D)item;
            collection.Add(newItem);
        }
        private void VectorAdd_8_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartSeries3D>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartSeries3D)item;
            collection.Add(newItem);
        }
        private void VectorAdd_24_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartAdornment>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)item;
            collection.Add(newItem);
        }
        private void VectorAdd_25_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartAdornment>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)item;
            collection.Add(newItem);
        }
        private void VectorAdd_47_ChartVisibleSeriesCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_48_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_49_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_50_ChartColumnDefinitions(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartColumnDefinition>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartColumnDefinition)item;
            collection.Add(newItem);
        }
        private void VectorAdd_51_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartColumnDefinition>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartColumnDefinition)item;
            collection.Add(newItem);
        }
        private void VectorAdd_52_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartColumnDefinition>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartColumnDefinition)item;
            collection.Add(newItem);
        }
        private void VectorAdd_55_ChartRowDefinitions(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartRowDefinition>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartRowDefinition)item;
            collection.Add(newItem);
        }
        private void VectorAdd_56_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartRowDefinition>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartRowDefinition)item;
            collection.Add(newItem);
        }
        private void VectorAdd_57_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartRowDefinition>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartRowDefinition)item;
            collection.Add(newItem);
        }
        private void VectorAdd_59_ChartAxisCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartAxis>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)item;
            collection.Add(newItem);
        }
        private void VectorAdd_60_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartAxis>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)item;
            collection.Add(newItem);
        }
        private void VectorAdd_61_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartAxis>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)item;
            collection.Add(newItem);
        }
        private void VectorAdd_66_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel)item;
            collection.Add(newItem);
        }
        private void VectorAdd_67_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel)item;
            collection.Add(newItem);
        }
        private void VectorAdd_71_ChartAxisLabelCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::CloudPulse.CloudPulse_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  CloudPulse.MainPage
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Syncfusion.UI.Xaml.Charts.SfChart3D
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase"));
                userType.Activator = Activate_3_SfChart3D;
                userType.SetContentPropertyName("Syncfusion.UI.Xaml.Charts.SfChart3D.Series");
                userType.AddMemberName("Series");
                userType.AddMemberName("PerspectiveAngle");
                userType.AddMemberName("Rotation");
                userType.AddMemberName("Depth");
                userType.AddMemberName("PrimaryAxis");
                userType.AddMemberName("SecondaryAxis");
                userType.AddMemberName("WallSize");
                userType.AddMemberName("EnableRotation");
                userType.AddMemberName("EnableSeriesSelection");
                userType.AddMemberName("EnableSegmentSelection");
                userType.AddMemberName("TopWallBrush");
                userType.AddMemberName("BottomWallBrush");
                userType.AddMemberName("RightWallBrush");
                userType.AddMemberName("LeftWallBrush");
                userType.AddMemberName("BackWallBrush");
                userType.AddMemberName("Tilt");
                xamlType = userType;
                break;

            case 4:   //  Syncfusion.UI.Xaml.Charts.ChartBase
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.AddMemberName("SideBySideSeriesPlacement");
                userType.AddMemberName("AxisThickness");
                userType.AddMemberName("SeriesClipRect");
                userType.AddMemberName("VisibleSeries");
                userType.AddMemberName("Palette");
                userType.AddMemberName("SeriesSelectedIndex");
                userType.AddMemberName("ColumnDefinitions");
                userType.AddMemberName("RowDefinitions");
                userType.AddMemberName("Axes");
                userType.AddMemberName("Header");
                userType.AddMemberName("HorizontalHeaderAlignment");
                userType.AddMemberName("VerticalHeaderAlignment");
                userType.AddMemberName("ColorModel");
                userType.AddMemberName("Legend");
                userType.AddMemberName("Row");
                userType.AddMemberName("Column");
                userType.AddMemberName("ColumnSpan");
                userType.AddMemberName("RowSpan");
                xamlType = userType;
                break;

            case 5:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Syncfusion.UI.Xaml.Charts.ChartSeries3DCollection
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartSeries3D>"));
                userType.CollectionAdd = VectorAdd_6_ChartSeries3DCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 7:   //  System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartSeries3D>
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartSeries3D>"));
                userType.Activator = Activate_7_ObservableCollection;
                userType.CollectionAdd = VectorAdd_7_ObservableCollection;
                xamlType = userType;
                break;

            case 8:   //  System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartSeries3D>
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_8_Collection;
                userType.CollectionAdd = VectorAdd_8_Collection;
                xamlType = userType;
                break;

            case 9:   //  Object
                xamlType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  Syncfusion.UI.Xaml.Charts.ChartSeries3D
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase"));
                userType.AddMemberName("SegmentSelectionBrush");
                userType.AddMemberName("AdornmentsInfo");
                userType.AddMemberName("SelectedIndex");
                userType.AddMemberName("SelectionMode");
                xamlType = userType;
                break;

            case 11:   //  Syncfusion.UI.Xaml.Charts.ChartSeriesBase
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.AddMemberName("DataCount");
                userType.AddMemberName("IsSortData");
                userType.AddMemberName("SortDirection");
                userType.AddMemberName("SortBy");
                userType.AddMemberName("TooltipTemplate");
                userType.AddMemberName("ShowTooltip");
                userType.AddMemberName("ListenPropertyChange");
                userType.AddMemberName("Adornments");
                userType.AddMemberName("IsSeriesVisible");
                userType.AddMemberName("Palette");
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("TrackBallLabelTemplate");
                userType.AddMemberName("Interior");
                userType.AddMemberName("Label");
                userType.AddMemberName("LegendIcon");
                userType.AddMemberName("LegendIconTemplate");
                userType.AddMemberName("VisibilityOnLegend");
                userType.AddMemberName("SeriesSelectionBrush");
                userType.AddMemberName("ColorModel");
                userType.AddMemberName("XBindingPath");
                userType.AddMemberName("EnableAnimation");
                userType.AddMemberName("AnimationDuration");
                userType.AddMemberName("EmptyPointValue");
                userType.AddMemberName("EmptyPointStyle");
                userType.AddMemberName("EmptyPointSymbolTemplate");
                userType.AddMemberName("ShowEmptyPoints");
                userType.AddMemberName("EmptyPointInterior");
                userType.AddMemberName("Spacing");
                xamlType = userType;
                break;

            case 12:   //  Windows.UI.Xaml.Media.Brush
                xamlType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Syncfusion.UI.Xaml.Charts.ChartAdornmentInfo3D
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAdornmentInfoBase"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 14:   //  Syncfusion.UI.Xaml.Charts.ChartAdornmentInfoBase
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                xamlType = userType;
                break;

            case 15:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  Int32
                xamlType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  Syncfusion.UI.Xaml.Charts.SelectionMode
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("MouseClick", global::Syncfusion.UI.Xaml.Charts.SelectionMode.MouseClick);
                userType.AddEnumValue("MouseMove", global::Syncfusion.UI.Xaml.Charts.SelectionMode.MouseMove);
                xamlType = userType;
                break;

            case 18:   //  System.Enum
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 19:   //  System.ValueType
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 20:   //  Boolean
                xamlType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 21:   //  Syncfusion.UI.Xaml.Charts.Direction
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Ascending", global::Syncfusion.UI.Xaml.Charts.Direction.Ascending);
                userType.AddEnumValue("Descending", global::Syncfusion.UI.Xaml.Charts.Direction.Descending);
                xamlType = userType;
                break;

            case 22:   //  Syncfusion.UI.Xaml.Charts.SortingAxis
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("X", global::Syncfusion.UI.Xaml.Charts.SortingAxis.X);
                userType.AddEnumValue("Y", global::Syncfusion.UI.Xaml.Charts.SortingAxis.Y);
                xamlType = userType;
                break;

            case 23:   //  Windows.UI.Xaml.DataTemplate
                xamlType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 24:   //  System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartAdornment>
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartAdornment>"));
                userType.CollectionAdd = VectorAdd_24_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 25:   //  System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartAdornment>
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_25_Collection;
                userType.CollectionAdd = VectorAdd_25_Collection;
                xamlType = userType;
                break;

            case 26:   //  Syncfusion.UI.Xaml.Charts.ChartAdornment
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSegment"));
                userType.Activator = Activate_26_ChartAdornment;
                userType.AddMemberName("Series");
                userType.AddMemberName("Background");
                userType.AddMemberName("BorderThickness");
                userType.AddMemberName("BorderBrush");
                userType.AddMemberName("Margin");
                userType.AddMemberName("FontFamily");
                userType.AddMemberName("FontStyle");
                userType.AddMemberName("FontSize");
                userType.AddMemberName("Foreground");
                userType.AddMemberName("ConnectorRotationAngle");
                userType.AddMemberName("ConnectorHeight");
                userType.AddMemberName("ActualContent");
                userType.AddMemberName("XData");
                userType.AddMemberName("YData");
                userType.AddMemberName("X");
                userType.AddMemberName("Y");
                xamlType = userType;
                break;

            case 27:   //  Syncfusion.UI.Xaml.Charts.ChartSegment
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.AddMemberName("XRange");
                userType.AddMemberName("YRange");
                userType.AddMemberName("Item");
                userType.AddMemberName("Interior");
                userType.AddMemberName("StrokeThickness");
                userType.AddMemberName("StrokeDashArray");
                userType.AddMemberName("Stroke");
                xamlType = userType;
                break;

            case 28:   //  Windows.UI.Xaml.Thickness
                xamlType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 29:   //  Windows.UI.Xaml.Media.FontFamily
                xamlType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 30:   //  Windows.UI.Text.FontStyle
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Normal", global::Windows.UI.Text.FontStyle.Normal);
                userType.AddEnumValue("Oblique", global::Windows.UI.Text.FontStyle.Oblique);
                userType.AddEnumValue("Italic", global::Windows.UI.Text.FontStyle.Italic);
                xamlType = userType;
                break;

            case 31:   //  Double
                xamlType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 32:   //  Syncfusion.UI.Xaml.Charts.DoubleRange
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 33:   //  Windows.UI.Xaml.Media.DoubleCollection
                xamlType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 34:   //  Syncfusion.UI.Xaml.Charts.ChartColorPalette
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Syncfusion.UI.Xaml.Charts.ChartColorPalette.None);
                userType.AddEnumValue("Metro", global::Syncfusion.UI.Xaml.Charts.ChartColorPalette.Metro);
                userType.AddEnumValue("Custom", global::Syncfusion.UI.Xaml.Charts.ChartColorPalette.Custom);
                userType.AddEnumValue("AutumnBrights", global::Syncfusion.UI.Xaml.Charts.ChartColorPalette.AutumnBrights);
                userType.AddEnumValue("FloraHues", global::Syncfusion.UI.Xaml.Charts.ChartColorPalette.FloraHues);
                userType.AddEnumValue("Pineapple", global::Syncfusion.UI.Xaml.Charts.ChartColorPalette.Pineapple);
                userType.AddEnumValue("TomotoSpectrum", global::Syncfusion.UI.Xaml.Charts.ChartColorPalette.TomotoSpectrum);
                userType.AddEnumValue("RedChrome", global::Syncfusion.UI.Xaml.Charts.ChartColorPalette.RedChrome);
                userType.AddEnumValue("PurpleChrome", global::Syncfusion.UI.Xaml.Charts.ChartColorPalette.PurpleChrome);
                userType.AddEnumValue("BlueChrome", global::Syncfusion.UI.Xaml.Charts.ChartColorPalette.BlueChrome);
                userType.AddEnumValue("GreenChrome", global::Syncfusion.UI.Xaml.Charts.ChartColorPalette.GreenChrome);
                userType.AddEnumValue("Elite", global::Syncfusion.UI.Xaml.Charts.ChartColorPalette.Elite);
                userType.AddEnumValue("SandyBeach", global::Syncfusion.UI.Xaml.Charts.ChartColorPalette.SandyBeach);
                userType.AddEnumValue("LightCandy", global::Syncfusion.UI.Xaml.Charts.ChartColorPalette.LightCandy);
                xamlType = userType;
                break;

            case 35:   //  System.Collections.IEnumerable
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 36:   //  String
                xamlType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 37:   //  Syncfusion.UI.Xaml.Charts.ChartLegendIcon
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Syncfusion.UI.Xaml.Charts.ChartLegendIcon.None);
                userType.AddEnumValue("SeriesType", global::Syncfusion.UI.Xaml.Charts.ChartLegendIcon.SeriesType);
                userType.AddEnumValue("Rectangle", global::Syncfusion.UI.Xaml.Charts.ChartLegendIcon.Rectangle);
                userType.AddEnumValue("StraightLine", global::Syncfusion.UI.Xaml.Charts.ChartLegendIcon.StraightLine);
                userType.AddEnumValue("Circle", global::Syncfusion.UI.Xaml.Charts.ChartLegendIcon.Circle);
                userType.AddEnumValue("Diamond", global::Syncfusion.UI.Xaml.Charts.ChartLegendIcon.Diamond);
                userType.AddEnumValue("Pentagon", global::Syncfusion.UI.Xaml.Charts.ChartLegendIcon.Pentagon);
                userType.AddEnumValue("Triangle", global::Syncfusion.UI.Xaml.Charts.ChartLegendIcon.Triangle);
                userType.AddEnumValue("InvertedTriangle", global::Syncfusion.UI.Xaml.Charts.ChartLegendIcon.InvertedTriangle);
                userType.AddEnumValue("Cross", global::Syncfusion.UI.Xaml.Charts.ChartLegendIcon.Cross);
                xamlType = userType;
                break;

            case 38:   //  Windows.UI.Xaml.Visibility
                xamlType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 39:   //  Syncfusion.UI.Xaml.Charts.ChartColorModel
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 40:   //  TimeSpan
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 41:   //  Syncfusion.UI.Xaml.Charts.EmptyPointValue
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Zero", global::Syncfusion.UI.Xaml.Charts.EmptyPointValue.Zero);
                userType.AddEnumValue("Average", global::Syncfusion.UI.Xaml.Charts.EmptyPointValue.Average);
                xamlType = userType;
                break;

            case 42:   //  Syncfusion.UI.Xaml.Charts.EmptyPointStyle
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Interior", global::Syncfusion.UI.Xaml.Charts.EmptyPointStyle.Interior);
                userType.AddEnumValue("Symbol", global::Syncfusion.UI.Xaml.Charts.EmptyPointStyle.Symbol);
                userType.AddEnumValue("SymbolAndInterior", global::Syncfusion.UI.Xaml.Charts.EmptyPointStyle.SymbolAndInterior);
                xamlType = userType;
                break;

            case 43:   //  Syncfusion.UI.Xaml.Charts.ChartAxisBase3D
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis"));
                xamlType = userType;
                break;

            case 44:   //  Syncfusion.UI.Xaml.Charts.ChartAxis
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.AddMemberName("ActualPlotOffset");
                userType.AddMemberName("MaximumLabels");
                userType.AddMemberName("VisibleRange");
                userType.AddMemberName("ArrangeRect");
                userType.AddMemberName("PositionPath");
                userType.AddMemberName("ContentPath");
                userType.AddMemberName("LabelFormat");
                userType.AddMemberName("LabelsSource");
                userType.AddMemberName("PostfixLabelTemplate");
                userType.AddMemberName("PrefixLabelTemplate");
                userType.AddMemberName("PlotOffset");
                userType.AddMemberName("AxisLineOffset");
                userType.AddMemberName("LabelsPosition");
                userType.AddMemberName("LabelsIntersectAction");
                userType.AddMemberName("LabelExtent");
                userType.AddMemberName("LabelRotationAngle");
                userType.AddMemberName("AxisLineStyle");
                userType.AddMemberName("OpposedPosition");
                userType.AddMemberName("DesiredIntervalsCount");
                userType.AddMemberName("ThumbLabelVisibility");
                userType.AddMemberName("ThumbLabelTemplate");
                userType.AddMemberName("Header");
                userType.AddMemberName("HeaderStyle");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("TickLineSize");
                userType.AddMemberName("VisibleLabels");
                userType.AddMemberName("IsInversed");
                userType.AddMemberName("Origin");
                userType.AddMemberName("ShowOrigin");
                userType.AddMemberName("TickLinesPosition");
                userType.AddMemberName("ShowAxisNextToOrigin");
                userType.AddMemberName("EdgeLabelsDrawingMode");
                userType.AddMemberName("EdgeLabelsVisibilityMode");
                userType.AddMemberName("MajorGridLineStyle");
                userType.AddMemberName("MinorGridLineStyle");
                userType.AddMemberName("MajorTickLineStyle");
                userType.AddMemberName("MinorTickLineStyle");
                userType.AddMemberName("ShowTrackBallInfo");
                userType.AddMemberName("TrackBallLabelTemplate");
                userType.AddMemberName("CrosshairLabelTemplate");
                userType.AddMemberName("ShowGridLines");
                userType.AddMemberName("EnableAutoIntervalOnZooming");
                userType.AddMemberName("LabelStyle");
                userType.AddMemberName("LabelTemplate");
                userType.AddMemberName("CustomLabels");
                userType.AddMemberName("IsLogarithmic");
                xamlType = userType;
                break;

            case 45:   //  Syncfusion.UI.Xaml.Charts.RangeAxisBase3D
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxisBase3D"));
                userType.AddMemberName("SmallTicksPerInterval");
                userType.AddMemberName("SmallTickLineSize");
                userType.AddMemberName("SmallTickLinesPosition");
                xamlType = userType;
                break;

            case 46:   //  Windows.Foundation.Rect
                xamlType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 47:   //  Syncfusion.UI.Xaml.Charts.ChartVisibleSeriesCollection
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartSeriesBase>"));
                userType.CollectionAdd = VectorAdd_47_ChartVisibleSeriesCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 48:   //  System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartSeriesBase>
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartSeriesBase>"));
                userType.Activator = Activate_48_ObservableCollection;
                userType.CollectionAdd = VectorAdd_48_ObservableCollection;
                xamlType = userType;
                break;

            case 49:   //  System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartSeriesBase>
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_49_Collection;
                userType.CollectionAdd = VectorAdd_49_Collection;
                xamlType = userType;
                break;

            case 50:   //  Syncfusion.UI.Xaml.Charts.ChartColumnDefinitions
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartColumnDefinition>"));
                userType.CollectionAdd = VectorAdd_50_ChartColumnDefinitions;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 51:   //  System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartColumnDefinition>
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartColumnDefinition>"));
                userType.Activator = Activate_51_ObservableCollection;
                userType.CollectionAdd = VectorAdd_51_ObservableCollection;
                xamlType = userType;
                break;

            case 52:   //  System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartColumnDefinition>
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_52_Collection;
                userType.CollectionAdd = VectorAdd_52_Collection;
                xamlType = userType;
                break;

            case 53:   //  Syncfusion.UI.Xaml.Charts.ChartColumnDefinition
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_53_ChartColumnDefinition;
                userType.AddMemberName("Width");
                userType.AddMemberName("Unit");
                userType.AddMemberName("BorderThickness");
                userType.AddMemberName("BorderStroke");
                xamlType = userType;
                break;

            case 54:   //  Syncfusion.UI.Xaml.Charts.ChartUnitType
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Star", global::Syncfusion.UI.Xaml.Charts.ChartUnitType.Star);
                userType.AddEnumValue("Pixels", global::Syncfusion.UI.Xaml.Charts.ChartUnitType.Pixels);
                xamlType = userType;
                break;

            case 55:   //  Syncfusion.UI.Xaml.Charts.ChartRowDefinitions
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartRowDefinition>"));
                userType.CollectionAdd = VectorAdd_55_ChartRowDefinitions;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 56:   //  System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartRowDefinition>
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartRowDefinition>"));
                userType.Activator = Activate_56_ObservableCollection;
                userType.CollectionAdd = VectorAdd_56_ObservableCollection;
                xamlType = userType;
                break;

            case 57:   //  System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartRowDefinition>
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_57_Collection;
                userType.CollectionAdd = VectorAdd_57_Collection;
                xamlType = userType;
                break;

            case 58:   //  Syncfusion.UI.Xaml.Charts.ChartRowDefinition
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_58_ChartRowDefinition;
                userType.AddMemberName("RowTop");
                userType.AddMemberName("Height");
                userType.AddMemberName("Unit");
                userType.AddMemberName("BorderThickness");
                userType.AddMemberName("BorderStroke");
                xamlType = userType;
                break;

            case 59:   //  Syncfusion.UI.Xaml.Charts.ChartAxisCollection
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartAxis>"));
                userType.CollectionAdd = VectorAdd_59_ChartAxisCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 60:   //  System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartAxis>
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartAxis>"));
                userType.Activator = Activate_60_ObservableCollection;
                userType.CollectionAdd = VectorAdd_60_ObservableCollection;
                xamlType = userType;
                break;

            case 61:   //  System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartAxis>
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_61_Collection;
                userType.CollectionAdd = VectorAdd_61_Collection;
                xamlType = userType;
                break;

            case 62:   //  Syncfusion.UI.Xaml.Charts.AxisElementPosition
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Inside", global::Syncfusion.UI.Xaml.Charts.AxisElementPosition.Inside);
                userType.AddEnumValue("Outside", global::Syncfusion.UI.Xaml.Charts.AxisElementPosition.Outside);
                xamlType = userType;
                break;

            case 63:   //  Syncfusion.UI.Xaml.Charts.AxisLabelsIntersectAction
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Syncfusion.UI.Xaml.Charts.AxisLabelsIntersectAction.None);
                userType.AddEnumValue("MultipleRows", global::Syncfusion.UI.Xaml.Charts.AxisLabelsIntersectAction.MultipleRows);
                userType.AddEnumValue("Hide", global::Syncfusion.UI.Xaml.Charts.AxisLabelsIntersectAction.Hide);
                xamlType = userType;
                break;

            case 64:   //  Windows.UI.Xaml.Style
                xamlType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 65:   //  Syncfusion.UI.Xaml.Charts.LabelStyle
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 66:   //  System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartAxisLabel>
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartAxisLabel>"));
                userType.Activator = Activate_66_ObservableCollection;
                userType.CollectionAdd = VectorAdd_66_ObservableCollection;
                xamlType = userType;
                break;

            case 67:   //  System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.Charts.ChartAxisLabel>
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_67_Collection;
                userType.CollectionAdd = VectorAdd_67_Collection;
                xamlType = userType;
                break;

            case 68:   //  Syncfusion.UI.Xaml.Charts.ChartAxisLabel
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_68_ChartAxisLabel;
                userType.AddMemberName("LabelContent");
                userType.AddMemberName("Position");
                userType.AddMemberName("PrefixLabelTemplate");
                userType.AddMemberName("PostfixLabelTemplate");
                xamlType = userType;
                break;

            case 69:   //  Syncfusion.UI.Xaml.Charts.EdgeLabelsDrawingMode
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Center", global::Syncfusion.UI.Xaml.Charts.EdgeLabelsDrawingMode.Center);
                userType.AddEnumValue("Shift", global::Syncfusion.UI.Xaml.Charts.EdgeLabelsDrawingMode.Shift);
                userType.AddEnumValue("Fit", global::Syncfusion.UI.Xaml.Charts.EdgeLabelsDrawingMode.Fit);
                userType.AddEnumValue("Hide", global::Syncfusion.UI.Xaml.Charts.EdgeLabelsDrawingMode.Hide);
                xamlType = userType;
                break;

            case 70:   //  Syncfusion.UI.Xaml.Charts.EdgeLabelsVisibilityMode
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Default", global::Syncfusion.UI.Xaml.Charts.EdgeLabelsVisibilityMode.Default);
                userType.AddEnumValue("AlwaysVisible", global::Syncfusion.UI.Xaml.Charts.EdgeLabelsVisibilityMode.AlwaysVisible);
                userType.AddEnumValue("Visible", global::Syncfusion.UI.Xaml.Charts.EdgeLabelsVisibilityMode.Visible);
                xamlType = userType;
                break;

            case 71:   //  Syncfusion.UI.Xaml.Charts.ChartAxisLabelCollection
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartAxisLabel>"));
                userType.CollectionAdd = VectorAdd_71_ChartAxisLabelCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 72:   //  Windows.UI.Xaml.HorizontalAlignment
                xamlType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 73:   //  Windows.UI.Xaml.VerticalAlignment
                xamlType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 74:   //  Windows.UI.Xaml.UIElement
                xamlType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 75:   //  Syncfusion.UI.Xaml.Charts.NumericalAxis3D
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.RangeAxisBase3D"));
                userType.Activator = Activate_75_NumericalAxis3D;
                userType.AddMemberName("Interval");
                userType.AddMemberName("Minimum");
                userType.AddMemberName("Maximum");
                userType.AddMemberName("RangePadding");
                userType.AddMemberName("StartRangeFromZero");
                xamlType = userType;
                break;

            case 76:   //  Syncfusion.UI.Xaml.Charts.NumericalPadding
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Syncfusion.UI.Xaml.Charts.NumericalPadding.Auto);
                userType.AddEnumValue("None", global::Syncfusion.UI.Xaml.Charts.NumericalPadding.None);
                userType.AddEnumValue("Round", global::Syncfusion.UI.Xaml.Charts.NumericalPadding.Round);
                userType.AddEnumValue("Normal", global::Syncfusion.UI.Xaml.Charts.NumericalPadding.Normal);
                userType.AddEnumValue("Additional", global::Syncfusion.UI.Xaml.Charts.NumericalPadding.Additional);
                xamlType = userType;
                break;

            case 77:   //  Syncfusion.UI.Xaml.Charts.LineSeries3D
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.XyDataSeries3D"));
                userType.Activator = Activate_77_LineSeries3D;
                userType.AddMemberName("StrokeThickness");
                userType.AddMemberName("Segment");
                xamlType = userType;
                break;

            case 78:   //  Syncfusion.UI.Xaml.Charts.XyDataSeries3D
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.CartesianSeries3D"));
                userType.AddMemberName("YBindingPath");
                xamlType = userType;
                break;

            case 79:   //  Syncfusion.UI.Xaml.Charts.CartesianSeries3D
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeries3D"));
                userType.AddMemberName("XRange");
                userType.AddMemberName("YRange");
                userType.AddMemberName("IsTransposed");
                xamlType = userType;
                break;

            case 80:   //  Syncfusion.UI.Xaml.Charts.LineSegment3D
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSegment3D"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 81:   //  Syncfusion.UI.Xaml.Charts.ChartSegment3D
                userType = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSegment"));
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Microsoft.Band.Microsoft_Band_Phone_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Microsoft.Band.Microsoft_Band_Store_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Charts.Syncfusion_SfChart_WP_2013_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_SfChart3D_Series(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            return that.Series;
        }
        private void set_0_SfChart3D_Series(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            that.Series = (global::Syncfusion.UI.Xaml.Charts.ChartSeries3DCollection)Value;
        }
        private object get_1_ChartSeries3D_SegmentSelectionBrush(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeries3D)instance;
            return that.SegmentSelectionBrush;
        }
        private void set_1_ChartSeries3D_SegmentSelectionBrush(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeries3D)instance;
            that.SegmentSelectionBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_2_ChartSeries3D_AdornmentsInfo(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeries3D)instance;
            return that.AdornmentsInfo;
        }
        private void set_2_ChartSeries3D_AdornmentsInfo(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeries3D)instance;
            that.AdornmentsInfo = (global::Syncfusion.UI.Xaml.Charts.ChartAdornmentInfo3D)Value;
        }
        private object get_3_ChartSeries3D_SelectedIndex(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeries3D)instance;
            return that.SelectedIndex;
        }
        private void set_3_ChartSeries3D_SelectedIndex(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeries3D)instance;
            that.SelectedIndex = (global::System.Int32)Value;
        }
        private object get_4_ChartSeries3D_SelectionMode(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeries3D)instance;
            return that.SelectionMode;
        }
        private void set_4_ChartSeries3D_SelectionMode(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeries3D)instance;
            that.SelectionMode = (global::Syncfusion.UI.Xaml.Charts.SelectionMode)Value;
        }
        private object get_5_ChartSeriesBase_DataCount(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.DataCount;
        }
        private object get_6_ChartSeriesBase_IsSortData(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.IsSortData;
        }
        private void set_6_ChartSeriesBase_IsSortData(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.IsSortData = (global::System.Boolean)Value;
        }
        private object get_7_ChartSeriesBase_SortDirection(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.SortDirection;
        }
        private void set_7_ChartSeriesBase_SortDirection(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.SortDirection = (global::Syncfusion.UI.Xaml.Charts.Direction)Value;
        }
        private object get_8_ChartSeriesBase_SortBy(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.SortBy;
        }
        private void set_8_ChartSeriesBase_SortBy(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.SortBy = (global::Syncfusion.UI.Xaml.Charts.SortingAxis)Value;
        }
        private object get_9_ChartSeriesBase_TooltipTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.TooltipTemplate;
        }
        private void set_9_ChartSeriesBase_TooltipTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.TooltipTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_10_ChartSeriesBase_ShowTooltip(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.ShowTooltip;
        }
        private void set_10_ChartSeriesBase_ShowTooltip(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.ShowTooltip = (global::System.Boolean)Value;
        }
        private object get_11_ChartSeriesBase_ListenPropertyChange(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.ListenPropertyChange;
        }
        private void set_11_ChartSeriesBase_ListenPropertyChange(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.ListenPropertyChange = (global::System.Boolean)Value;
        }
        private object get_12_ChartSeriesBase_Adornments(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.Adornments;
        }
        private object get_13_ChartAdornment_Series(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)instance;
            return that.Series;
        }
        private object get_14_ChartAdornment_Background(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)instance;
            return that.Background;
        }
        private void set_14_ChartAdornment_Background(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)instance;
            that.Background = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_15_ChartAdornment_BorderThickness(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)instance;
            return that.BorderThickness;
        }
        private void set_15_ChartAdornment_BorderThickness(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)instance;
            that.BorderThickness = (global::Windows.UI.Xaml.Thickness)Value;
        }
        private object get_16_ChartAdornment_BorderBrush(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)instance;
            return that.BorderBrush;
        }
        private void set_16_ChartAdornment_BorderBrush(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)instance;
            that.BorderBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_17_ChartAdornment_Margin(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)instance;
            return that.Margin;
        }
        private void set_17_ChartAdornment_Margin(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)instance;
            that.Margin = (global::Windows.UI.Xaml.Thickness)Value;
        }
        private object get_18_ChartAdornment_FontFamily(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)instance;
            return that.FontFamily;
        }
        private void set_18_ChartAdornment_FontFamily(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)instance;
            that.FontFamily = (global::Windows.UI.Xaml.Media.FontFamily)Value;
        }
        private object get_19_ChartAdornment_FontStyle(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)instance;
            return that.FontStyle;
        }
        private void set_19_ChartAdornment_FontStyle(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)instance;
            that.FontStyle = (global::Windows.UI.Text.FontStyle)Value;
        }
        private object get_20_ChartAdornment_FontSize(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)instance;
            return that.FontSize;
        }
        private void set_20_ChartAdornment_FontSize(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)instance;
            that.FontSize = (global::System.Double)Value;
        }
        private object get_21_ChartAdornment_Foreground(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)instance;
            return that.Foreground;
        }
        private void set_21_ChartAdornment_Foreground(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)instance;
            that.Foreground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_22_ChartAdornment_ConnectorRotationAngle(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)instance;
            return that.ConnectorRotationAngle;
        }
        private void set_22_ChartAdornment_ConnectorRotationAngle(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)instance;
            that.ConnectorRotationAngle = (global::System.Double)Value;
        }
        private object get_23_ChartAdornment_ConnectorHeight(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)instance;
            return that.ConnectorHeight;
        }
        private void set_23_ChartAdornment_ConnectorHeight(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)instance;
            that.ConnectorHeight = (global::System.Double)Value;
        }
        private object get_24_ChartAdornment_ActualContent(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)instance;
            return that.ActualContent;
        }
        private object get_25_ChartAdornment_XData(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)instance;
            return that.XData;
        }
        private void set_25_ChartAdornment_XData(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)instance;
            that.XData = (global::System.Double)Value;
        }
        private object get_26_ChartAdornment_YData(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)instance;
            return that.YData;
        }
        private void set_26_ChartAdornment_YData(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)instance;
            that.YData = (global::System.Double)Value;
        }
        private object get_27_ChartAdornment_X(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)instance;
            return that.X;
        }
        private object get_28_ChartAdornment_Y(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAdornment)instance;
            return that.Y;
        }
        private object get_29_ChartSegment_XRange(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSegment)instance;
            return that.XRange;
        }
        private void set_29_ChartSegment_XRange(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSegment)instance;
            that.XRange = (global::Syncfusion.UI.Xaml.Charts.DoubleRange)Value;
        }
        private object get_30_ChartSegment_YRange(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSegment)instance;
            return that.YRange;
        }
        private void set_30_ChartSegment_YRange(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSegment)instance;
            that.YRange = (global::Syncfusion.UI.Xaml.Charts.DoubleRange)Value;
        }
        private object get_31_ChartSegment_Item(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSegment)instance;
            return that.Item;
        }
        private void set_31_ChartSegment_Item(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSegment)instance;
            that.Item = (global::System.Object)Value;
        }
        private object get_32_ChartSegment_Interior(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSegment)instance;
            return that.Interior;
        }
        private void set_32_ChartSegment_Interior(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSegment)instance;
            that.Interior = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_33_ChartSegment_StrokeThickness(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSegment)instance;
            return that.StrokeThickness;
        }
        private void set_33_ChartSegment_StrokeThickness(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSegment)instance;
            that.StrokeThickness = (global::System.Double)Value;
        }
        private object get_34_ChartSegment_StrokeDashArray(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSegment)instance;
            return that.StrokeDashArray;
        }
        private void set_34_ChartSegment_StrokeDashArray(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSegment)instance;
            that.StrokeDashArray = (global::Windows.UI.Xaml.Media.DoubleCollection)Value;
        }
        private object get_35_ChartSegment_Stroke(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSegment)instance;
            return that.Stroke;
        }
        private void set_35_ChartSegment_Stroke(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSegment)instance;
            that.Stroke = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_36_ChartSeriesBase_IsSeriesVisible(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.IsSeriesVisible;
        }
        private void set_36_ChartSeriesBase_IsSeriesVisible(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.IsSeriesVisible = (global::System.Boolean)Value;
        }
        private object get_37_ChartSeriesBase_Palette(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.Palette;
        }
        private void set_37_ChartSeriesBase_Palette(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.Palette = (global::Syncfusion.UI.Xaml.Charts.ChartColorPalette)Value;
        }
        private object get_38_ChartSeriesBase_ItemsSource(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.ItemsSource;
        }
        private void set_38_ChartSeriesBase_ItemsSource(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.ItemsSource = (global::System.Collections.IEnumerable)Value;
        }
        private object get_39_ChartSeriesBase_TrackBallLabelTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.TrackBallLabelTemplate;
        }
        private void set_39_ChartSeriesBase_TrackBallLabelTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.TrackBallLabelTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_40_ChartSeriesBase_Interior(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.Interior;
        }
        private void set_40_ChartSeriesBase_Interior(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.Interior = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_41_ChartSeriesBase_Label(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.Label;
        }
        private void set_41_ChartSeriesBase_Label(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.Label = (global::System.String)Value;
        }
        private object get_42_ChartSeriesBase_LegendIcon(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.LegendIcon;
        }
        private void set_42_ChartSeriesBase_LegendIcon(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.LegendIcon = (global::Syncfusion.UI.Xaml.Charts.ChartLegendIcon)Value;
        }
        private object get_43_ChartSeriesBase_LegendIconTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.LegendIconTemplate;
        }
        private void set_43_ChartSeriesBase_LegendIconTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.LegendIconTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_44_ChartSeriesBase_VisibilityOnLegend(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.VisibilityOnLegend;
        }
        private void set_44_ChartSeriesBase_VisibilityOnLegend(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.VisibilityOnLegend = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_45_ChartSeriesBase_SeriesSelectionBrush(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.SeriesSelectionBrush;
        }
        private void set_45_ChartSeriesBase_SeriesSelectionBrush(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.SeriesSelectionBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_46_ChartSeriesBase_ColorModel(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.ColorModel;
        }
        private void set_46_ChartSeriesBase_ColorModel(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.ColorModel = (global::Syncfusion.UI.Xaml.Charts.ChartColorModel)Value;
        }
        private object get_47_ChartSeriesBase_XBindingPath(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.XBindingPath;
        }
        private void set_47_ChartSeriesBase_XBindingPath(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.XBindingPath = (global::System.String)Value;
        }
        private object get_48_ChartSeriesBase_EnableAnimation(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.EnableAnimation;
        }
        private void set_48_ChartSeriesBase_EnableAnimation(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.EnableAnimation = (global::System.Boolean)Value;
        }
        private object get_49_ChartSeriesBase_AnimationDuration(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.AnimationDuration;
        }
        private void set_49_ChartSeriesBase_AnimationDuration(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.AnimationDuration = (global::System.TimeSpan)Value;
        }
        private object get_50_ChartSeriesBase_EmptyPointValue(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.EmptyPointValue;
        }
        private void set_50_ChartSeriesBase_EmptyPointValue(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.EmptyPointValue = (global::Syncfusion.UI.Xaml.Charts.EmptyPointValue)Value;
        }
        private object get_51_ChartSeriesBase_EmptyPointStyle(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.EmptyPointStyle;
        }
        private void set_51_ChartSeriesBase_EmptyPointStyle(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.EmptyPointStyle = (global::Syncfusion.UI.Xaml.Charts.EmptyPointStyle)Value;
        }
        private object get_52_ChartSeriesBase_EmptyPointSymbolTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.EmptyPointSymbolTemplate;
        }
        private void set_52_ChartSeriesBase_EmptyPointSymbolTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.EmptyPointSymbolTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_53_ChartSeriesBase_ShowEmptyPoints(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.ShowEmptyPoints;
        }
        private void set_53_ChartSeriesBase_ShowEmptyPoints(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.ShowEmptyPoints = (global::System.Boolean)Value;
        }
        private object get_54_ChartSeriesBase_EmptyPointInterior(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            return that.EmptyPointInterior;
        }
        private void set_54_ChartSeriesBase_EmptyPointInterior(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase)instance;
            that.EmptyPointInterior = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_55_ChartSeriesBase_Spacing(object instance)
        {
            return global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase.GetSpacing((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_55_ChartSeriesBase_Spacing(object instance, object Value)
        {
            global::Syncfusion.UI.Xaml.Charts.ChartSeriesBase.SetSpacing((global::Windows.UI.Xaml.DependencyObject)instance, (global::System.Double)Value);
        }
        private object get_56_SfChart3D_PerspectiveAngle(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            return that.PerspectiveAngle;
        }
        private void set_56_SfChart3D_PerspectiveAngle(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            that.PerspectiveAngle = (global::System.Double)Value;
        }
        private object get_57_SfChart3D_Rotation(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            return that.Rotation;
        }
        private void set_57_SfChart3D_Rotation(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            that.Rotation = (global::System.Double)Value;
        }
        private object get_58_ChartBase_SideBySideSeriesPlacement(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            return that.SideBySideSeriesPlacement;
        }
        private void set_58_ChartBase_SideBySideSeriesPlacement(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            that.SideBySideSeriesPlacement = (global::System.Boolean)Value;
        }
        private object get_59_SfChart3D_Depth(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            return that.Depth;
        }
        private void set_59_SfChart3D_Depth(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            that.Depth = (global::System.Double)Value;
        }
        private object get_60_SfChart3D_PrimaryAxis(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            return that.PrimaryAxis;
        }
        private void set_60_SfChart3D_PrimaryAxis(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            that.PrimaryAxis = (global::Syncfusion.UI.Xaml.Charts.ChartAxisBase3D)Value;
        }
        private object get_61_SfChart3D_SecondaryAxis(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            return that.SecondaryAxis;
        }
        private void set_61_SfChart3D_SecondaryAxis(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            that.SecondaryAxis = (global::Syncfusion.UI.Xaml.Charts.RangeAxisBase3D)Value;
        }
        private object get_62_SfChart3D_WallSize(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            return that.WallSize;
        }
        private void set_62_SfChart3D_WallSize(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            that.WallSize = (global::System.Double)Value;
        }
        private object get_63_SfChart3D_EnableRotation(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            return that.EnableRotation;
        }
        private void set_63_SfChart3D_EnableRotation(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            that.EnableRotation = (global::System.Boolean)Value;
        }
        private object get_64_SfChart3D_EnableSeriesSelection(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            return that.EnableSeriesSelection;
        }
        private void set_64_SfChart3D_EnableSeriesSelection(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            that.EnableSeriesSelection = (global::System.Boolean)Value;
        }
        private object get_65_SfChart3D_EnableSegmentSelection(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            return that.EnableSegmentSelection;
        }
        private void set_65_SfChart3D_EnableSegmentSelection(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            that.EnableSegmentSelection = (global::System.Boolean)Value;
        }
        private object get_66_SfChart3D_TopWallBrush(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            return that.TopWallBrush;
        }
        private void set_66_SfChart3D_TopWallBrush(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            that.TopWallBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_67_SfChart3D_BottomWallBrush(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            return that.BottomWallBrush;
        }
        private void set_67_SfChart3D_BottomWallBrush(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            that.BottomWallBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_68_SfChart3D_RightWallBrush(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            return that.RightWallBrush;
        }
        private void set_68_SfChart3D_RightWallBrush(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            that.RightWallBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_69_SfChart3D_LeftWallBrush(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            return that.LeftWallBrush;
        }
        private void set_69_SfChart3D_LeftWallBrush(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            that.LeftWallBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_70_SfChart3D_BackWallBrush(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            return that.BackWallBrush;
        }
        private void set_70_SfChart3D_BackWallBrush(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            that.BackWallBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_71_SfChart3D_Tilt(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            return that.Tilt;
        }
        private void set_71_SfChart3D_Tilt(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.SfChart3D)instance;
            that.Tilt = (global::System.Double)Value;
        }
        private object get_72_ChartBase_AxisThickness(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            return that.AxisThickness;
        }
        private object get_73_ChartBase_SeriesClipRect(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            return that.SeriesClipRect;
        }
        private object get_74_ChartBase_VisibleSeries(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            return that.VisibleSeries;
        }
        private object get_75_ChartBase_Palette(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            return that.Palette;
        }
        private void set_75_ChartBase_Palette(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            that.Palette = (global::Syncfusion.UI.Xaml.Charts.ChartColorPalette)Value;
        }
        private object get_76_ChartBase_SeriesSelectedIndex(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            return that.SeriesSelectedIndex;
        }
        private void set_76_ChartBase_SeriesSelectedIndex(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            that.SeriesSelectedIndex = (global::System.Int32)Value;
        }
        private object get_77_ChartBase_ColumnDefinitions(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            return that.ColumnDefinitions;
        }
        private void set_77_ChartBase_ColumnDefinitions(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            that.ColumnDefinitions = (global::Syncfusion.UI.Xaml.Charts.ChartColumnDefinitions)Value;
        }
        private object get_78_ChartColumnDefinition_Width(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartColumnDefinition)instance;
            return that.Width;
        }
        private void set_78_ChartColumnDefinition_Width(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartColumnDefinition)instance;
            that.Width = (global::System.Double)Value;
        }
        private object get_79_ChartColumnDefinition_Unit(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartColumnDefinition)instance;
            return that.Unit;
        }
        private void set_79_ChartColumnDefinition_Unit(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartColumnDefinition)instance;
            that.Unit = (global::Syncfusion.UI.Xaml.Charts.ChartUnitType)Value;
        }
        private object get_80_ChartColumnDefinition_BorderThickness(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartColumnDefinition)instance;
            return that.BorderThickness;
        }
        private void set_80_ChartColumnDefinition_BorderThickness(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartColumnDefinition)instance;
            that.BorderThickness = (global::System.Double)Value;
        }
        private object get_81_ChartColumnDefinition_BorderStroke(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartColumnDefinition)instance;
            return that.BorderStroke;
        }
        private void set_81_ChartColumnDefinition_BorderStroke(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartColumnDefinition)instance;
            that.BorderStroke = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_82_ChartBase_RowDefinitions(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            return that.RowDefinitions;
        }
        private void set_82_ChartBase_RowDefinitions(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            that.RowDefinitions = (global::Syncfusion.UI.Xaml.Charts.ChartRowDefinitions)Value;
        }
        private object get_83_ChartRowDefinition_RowTop(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartRowDefinition)instance;
            return that.RowTop;
        }
        private object get_84_ChartRowDefinition_Height(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartRowDefinition)instance;
            return that.Height;
        }
        private void set_84_ChartRowDefinition_Height(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartRowDefinition)instance;
            that.Height = (global::System.Double)Value;
        }
        private object get_85_ChartRowDefinition_Unit(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartRowDefinition)instance;
            return that.Unit;
        }
        private void set_85_ChartRowDefinition_Unit(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartRowDefinition)instance;
            that.Unit = (global::Syncfusion.UI.Xaml.Charts.ChartUnitType)Value;
        }
        private object get_86_ChartRowDefinition_BorderThickness(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartRowDefinition)instance;
            return that.BorderThickness;
        }
        private void set_86_ChartRowDefinition_BorderThickness(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartRowDefinition)instance;
            that.BorderThickness = (global::System.Double)Value;
        }
        private object get_87_ChartRowDefinition_BorderStroke(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartRowDefinition)instance;
            return that.BorderStroke;
        }
        private void set_87_ChartRowDefinition_BorderStroke(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartRowDefinition)instance;
            that.BorderStroke = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_88_ChartBase_Axes(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            return that.Axes;
        }
        private object get_89_ChartAxis_ActualPlotOffset(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.ActualPlotOffset;
        }
        private object get_90_ChartAxis_MaximumLabels(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.MaximumLabels;
        }
        private void set_90_ChartAxis_MaximumLabels(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.MaximumLabels = (global::System.Int32)Value;
        }
        private object get_91_ChartAxis_VisibleRange(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.VisibleRange;
        }
        private object get_92_ChartAxis_ArrangeRect(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.ArrangeRect;
        }
        private object get_93_ChartAxis_PositionPath(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.PositionPath;
        }
        private void set_93_ChartAxis_PositionPath(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.PositionPath = (global::System.String)Value;
        }
        private object get_94_ChartAxis_ContentPath(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.ContentPath;
        }
        private void set_94_ChartAxis_ContentPath(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.ContentPath = (global::System.String)Value;
        }
        private object get_95_ChartAxis_LabelFormat(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.LabelFormat;
        }
        private void set_95_ChartAxis_LabelFormat(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.LabelFormat = (global::System.String)Value;
        }
        private object get_96_ChartAxis_LabelsSource(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.LabelsSource;
        }
        private void set_96_ChartAxis_LabelsSource(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.LabelsSource = (global::System.Object)Value;
        }
        private object get_97_ChartAxis_PostfixLabelTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.PostfixLabelTemplate;
        }
        private void set_97_ChartAxis_PostfixLabelTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.PostfixLabelTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_98_ChartAxis_PrefixLabelTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.PrefixLabelTemplate;
        }
        private void set_98_ChartAxis_PrefixLabelTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.PrefixLabelTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_99_ChartAxis_PlotOffset(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.PlotOffset;
        }
        private void set_99_ChartAxis_PlotOffset(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.PlotOffset = (global::System.Double)Value;
        }
        private object get_100_ChartAxis_AxisLineOffset(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.AxisLineOffset;
        }
        private void set_100_ChartAxis_AxisLineOffset(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.AxisLineOffset = (global::System.Double)Value;
        }
        private object get_101_ChartAxis_LabelsPosition(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.LabelsPosition;
        }
        private void set_101_ChartAxis_LabelsPosition(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.LabelsPosition = (global::Syncfusion.UI.Xaml.Charts.AxisElementPosition)Value;
        }
        private object get_102_ChartAxis_LabelsIntersectAction(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.LabelsIntersectAction;
        }
        private void set_102_ChartAxis_LabelsIntersectAction(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.LabelsIntersectAction = (global::Syncfusion.UI.Xaml.Charts.AxisLabelsIntersectAction)Value;
        }
        private object get_103_ChartAxis_LabelExtent(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.LabelExtent;
        }
        private void set_103_ChartAxis_LabelExtent(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.LabelExtent = (global::System.Double)Value;
        }
        private object get_104_ChartAxis_LabelRotationAngle(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.LabelRotationAngle;
        }
        private void set_104_ChartAxis_LabelRotationAngle(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.LabelRotationAngle = (global::System.Double)Value;
        }
        private object get_105_ChartAxis_AxisLineStyle(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.AxisLineStyle;
        }
        private void set_105_ChartAxis_AxisLineStyle(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.AxisLineStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_106_ChartAxis_OpposedPosition(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.OpposedPosition;
        }
        private void set_106_ChartAxis_OpposedPosition(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.OpposedPosition = (global::System.Boolean)Value;
        }
        private object get_107_ChartAxis_DesiredIntervalsCount(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.DesiredIntervalsCount;
        }
        private void set_107_ChartAxis_DesiredIntervalsCount(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.DesiredIntervalsCount = (global::System.Object)Value;
        }
        private object get_108_ChartAxis_ThumbLabelVisibility(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.ThumbLabelVisibility;
        }
        private void set_108_ChartAxis_ThumbLabelVisibility(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.ThumbLabelVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_109_ChartAxis_ThumbLabelTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.ThumbLabelTemplate;
        }
        private void set_109_ChartAxis_ThumbLabelTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.ThumbLabelTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_110_ChartAxis_Header(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.Header;
        }
        private void set_110_ChartAxis_Header(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_111_ChartAxis_HeaderStyle(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.HeaderStyle;
        }
        private void set_111_ChartAxis_HeaderStyle(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.HeaderStyle = (global::Syncfusion.UI.Xaml.Charts.LabelStyle)Value;
        }
        private object get_112_ChartAxis_HeaderTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.HeaderTemplate;
        }
        private void set_112_ChartAxis_HeaderTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.HeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_113_ChartAxis_TickLineSize(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.TickLineSize;
        }
        private void set_113_ChartAxis_TickLineSize(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.TickLineSize = (global::System.Double)Value;
        }
        private object get_114_ChartAxis_VisibleLabels(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.VisibleLabels;
        }
        private object get_115_ChartAxisLabel_LabelContent(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel)instance;
            return that.LabelContent;
        }
        private void set_115_ChartAxisLabel_LabelContent(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel)instance;
            that.LabelContent = (global::System.Object)Value;
        }
        private object get_116_ChartAxisLabel_Position(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel)instance;
            return that.Position;
        }
        private void set_116_ChartAxisLabel_Position(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel)instance;
            that.Position = (global::System.Double)Value;
        }
        private object get_117_ChartAxisLabel_PrefixLabelTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel)instance;
            return that.PrefixLabelTemplate;
        }
        private void set_117_ChartAxisLabel_PrefixLabelTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel)instance;
            that.PrefixLabelTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_118_ChartAxisLabel_PostfixLabelTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel)instance;
            return that.PostfixLabelTemplate;
        }
        private void set_118_ChartAxisLabel_PostfixLabelTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxisLabel)instance;
            that.PostfixLabelTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_119_ChartAxis_IsInversed(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.IsInversed;
        }
        private void set_119_ChartAxis_IsInversed(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.IsInversed = (global::System.Boolean)Value;
        }
        private object get_120_ChartAxis_Origin(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.Origin;
        }
        private void set_120_ChartAxis_Origin(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.Origin = (global::System.Double)Value;
        }
        private object get_121_ChartAxis_ShowOrigin(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.ShowOrigin;
        }
        private void set_121_ChartAxis_ShowOrigin(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.ShowOrigin = (global::System.Boolean)Value;
        }
        private object get_122_ChartAxis_TickLinesPosition(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.TickLinesPosition;
        }
        private void set_122_ChartAxis_TickLinesPosition(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.TickLinesPosition = (global::Syncfusion.UI.Xaml.Charts.AxisElementPosition)Value;
        }
        private object get_123_ChartAxis_ShowAxisNextToOrigin(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.ShowAxisNextToOrigin;
        }
        private void set_123_ChartAxis_ShowAxisNextToOrigin(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.ShowAxisNextToOrigin = (global::System.Boolean)Value;
        }
        private object get_124_ChartAxis_EdgeLabelsDrawingMode(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.EdgeLabelsDrawingMode;
        }
        private void set_124_ChartAxis_EdgeLabelsDrawingMode(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.EdgeLabelsDrawingMode = (global::Syncfusion.UI.Xaml.Charts.EdgeLabelsDrawingMode)Value;
        }
        private object get_125_ChartAxis_EdgeLabelsVisibilityMode(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.EdgeLabelsVisibilityMode;
        }
        private void set_125_ChartAxis_EdgeLabelsVisibilityMode(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.EdgeLabelsVisibilityMode = (global::Syncfusion.UI.Xaml.Charts.EdgeLabelsVisibilityMode)Value;
        }
        private object get_126_ChartAxis_MajorGridLineStyle(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.MajorGridLineStyle;
        }
        private void set_126_ChartAxis_MajorGridLineStyle(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.MajorGridLineStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_127_ChartAxis_MinorGridLineStyle(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.MinorGridLineStyle;
        }
        private void set_127_ChartAxis_MinorGridLineStyle(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.MinorGridLineStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_128_ChartAxis_MajorTickLineStyle(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.MajorTickLineStyle;
        }
        private void set_128_ChartAxis_MajorTickLineStyle(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.MajorTickLineStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_129_ChartAxis_MinorTickLineStyle(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.MinorTickLineStyle;
        }
        private void set_129_ChartAxis_MinorTickLineStyle(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.MinorTickLineStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_130_ChartAxis_ShowTrackBallInfo(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.ShowTrackBallInfo;
        }
        private void set_130_ChartAxis_ShowTrackBallInfo(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.ShowTrackBallInfo = (global::System.Boolean)Value;
        }
        private object get_131_ChartAxis_TrackBallLabelTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.TrackBallLabelTemplate;
        }
        private void set_131_ChartAxis_TrackBallLabelTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.TrackBallLabelTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_132_ChartAxis_CrosshairLabelTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.CrosshairLabelTemplate;
        }
        private void set_132_ChartAxis_CrosshairLabelTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.CrosshairLabelTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_133_ChartAxis_ShowGridLines(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.ShowGridLines;
        }
        private void set_133_ChartAxis_ShowGridLines(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.ShowGridLines = (global::System.Boolean)Value;
        }
        private object get_134_ChartAxis_EnableAutoIntervalOnZooming(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.EnableAutoIntervalOnZooming;
        }
        private void set_134_ChartAxis_EnableAutoIntervalOnZooming(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.EnableAutoIntervalOnZooming = (global::System.Boolean)Value;
        }
        private object get_135_ChartAxis_LabelStyle(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.LabelStyle;
        }
        private void set_135_ChartAxis_LabelStyle(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.LabelStyle = (global::Syncfusion.UI.Xaml.Charts.LabelStyle)Value;
        }
        private object get_136_ChartAxis_LabelTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.LabelTemplate;
        }
        private void set_136_ChartAxis_LabelTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            that.LabelTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_137_ChartAxis_CustomLabels(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.CustomLabels;
        }
        private object get_138_ChartAxis_IsLogarithmic(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartAxis)instance;
            return that.IsLogarithmic;
        }
        private object get_139_ChartBase_Header(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            return that.Header;
        }
        private void set_139_ChartBase_Header(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_140_ChartBase_HorizontalHeaderAlignment(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            return that.HorizontalHeaderAlignment;
        }
        private void set_140_ChartBase_HorizontalHeaderAlignment(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            that.HorizontalHeaderAlignment = (global::Windows.UI.Xaml.HorizontalAlignment)Value;
        }
        private object get_141_ChartBase_VerticalHeaderAlignment(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            return that.VerticalHeaderAlignment;
        }
        private void set_141_ChartBase_VerticalHeaderAlignment(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            that.VerticalHeaderAlignment = (global::Windows.UI.Xaml.VerticalAlignment)Value;
        }
        private object get_142_ChartBase_ColorModel(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            return that.ColorModel;
        }
        private void set_142_ChartBase_ColorModel(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            that.ColorModel = (global::Syncfusion.UI.Xaml.Charts.ChartColorModel)Value;
        }
        private object get_143_ChartBase_Legend(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            return that.Legend;
        }
        private void set_143_ChartBase_Legend(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.ChartBase)instance;
            that.Legend = (global::System.Object)Value;
        }
        private object get_144_ChartBase_Row(object instance)
        {
            return global::Syncfusion.UI.Xaml.Charts.ChartBase.GetRow((global::Windows.UI.Xaml.UIElement)instance);
        }
        private void set_144_ChartBase_Row(object instance, object Value)
        {
            global::Syncfusion.UI.Xaml.Charts.ChartBase.SetRow((global::Windows.UI.Xaml.UIElement)instance, (global::System.Int32)Value);
        }
        private object get_145_ChartBase_Column(object instance)
        {
            return global::Syncfusion.UI.Xaml.Charts.ChartBase.GetColumn((global::Windows.UI.Xaml.UIElement)instance);
        }
        private void set_145_ChartBase_Column(object instance, object Value)
        {
            global::Syncfusion.UI.Xaml.Charts.ChartBase.SetColumn((global::Windows.UI.Xaml.UIElement)instance, (global::System.Int32)Value);
        }
        private object get_146_ChartBase_ColumnSpan(object instance)
        {
            return global::Syncfusion.UI.Xaml.Charts.ChartBase.GetColumnSpan((global::Windows.UI.Xaml.UIElement)instance);
        }
        private void set_146_ChartBase_ColumnSpan(object instance, object Value)
        {
            global::Syncfusion.UI.Xaml.Charts.ChartBase.SetColumnSpan((global::Windows.UI.Xaml.UIElement)instance, (global::System.Int32)Value);
        }
        private object get_147_ChartBase_RowSpan(object instance)
        {
            return global::Syncfusion.UI.Xaml.Charts.ChartBase.GetRowSpan((global::Windows.UI.Xaml.UIElement)instance);
        }
        private void set_147_ChartBase_RowSpan(object instance, object Value)
        {
            global::Syncfusion.UI.Xaml.Charts.ChartBase.SetRowSpan((global::Windows.UI.Xaml.UIElement)instance, (global::System.Int32)Value);
        }
        private object get_148_NumericalAxis3D_Interval(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.NumericalAxis3D)instance;
            return that.Interval;
        }
        private void set_148_NumericalAxis3D_Interval(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.NumericalAxis3D)instance;
            that.Interval = (global::System.Object)Value;
        }
        private object get_149_NumericalAxis3D_Minimum(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.NumericalAxis3D)instance;
            return that.Minimum;
        }
        private void set_149_NumericalAxis3D_Minimum(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.NumericalAxis3D)instance;
            that.Minimum = (global::System.Object)Value;
        }
        private object get_150_NumericalAxis3D_Maximum(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.NumericalAxis3D)instance;
            return that.Maximum;
        }
        private void set_150_NumericalAxis3D_Maximum(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.NumericalAxis3D)instance;
            that.Maximum = (global::System.Object)Value;
        }
        private object get_151_NumericalAxis3D_RangePadding(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.NumericalAxis3D)instance;
            return that.RangePadding;
        }
        private void set_151_NumericalAxis3D_RangePadding(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.NumericalAxis3D)instance;
            that.RangePadding = (global::Syncfusion.UI.Xaml.Charts.NumericalPadding)Value;
        }
        private object get_152_NumericalAxis3D_StartRangeFromZero(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.NumericalAxis3D)instance;
            return that.StartRangeFromZero;
        }
        private void set_152_NumericalAxis3D_StartRangeFromZero(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.NumericalAxis3D)instance;
            that.StartRangeFromZero = (global::System.Boolean)Value;
        }
        private object get_153_RangeAxisBase3D_SmallTicksPerInterval(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.RangeAxisBase3D)instance;
            return that.SmallTicksPerInterval;
        }
        private void set_153_RangeAxisBase3D_SmallTicksPerInterval(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.RangeAxisBase3D)instance;
            that.SmallTicksPerInterval = (global::System.Int32)Value;
        }
        private object get_154_RangeAxisBase3D_SmallTickLineSize(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.RangeAxisBase3D)instance;
            return that.SmallTickLineSize;
        }
        private void set_154_RangeAxisBase3D_SmallTickLineSize(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.RangeAxisBase3D)instance;
            that.SmallTickLineSize = (global::System.Double)Value;
        }
        private object get_155_RangeAxisBase3D_SmallTickLinesPosition(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.RangeAxisBase3D)instance;
            return that.SmallTickLinesPosition;
        }
        private void set_155_RangeAxisBase3D_SmallTickLinesPosition(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.RangeAxisBase3D)instance;
            that.SmallTickLinesPosition = (global::Syncfusion.UI.Xaml.Charts.AxisElementPosition)Value;
        }
        private object get_156_XyDataSeries3D_YBindingPath(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.XyDataSeries3D)instance;
            return that.YBindingPath;
        }
        private void set_156_XyDataSeries3D_YBindingPath(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.XyDataSeries3D)instance;
            that.YBindingPath = (global::System.String)Value;
        }
        private object get_157_LineSeries3D_StrokeThickness(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.LineSeries3D)instance;
            return that.StrokeThickness;
        }
        private void set_157_LineSeries3D_StrokeThickness(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.LineSeries3D)instance;
            that.StrokeThickness = (global::System.Int32)Value;
        }
        private object get_158_LineSeries3D_Segment(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.LineSeries3D)instance;
            return that.Segment;
        }
        private void set_158_LineSeries3D_Segment(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.LineSeries3D)instance;
            that.Segment = (global::Syncfusion.UI.Xaml.Charts.LineSegment3D)Value;
        }
        private object get_159_CartesianSeries3D_XRange(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.CartesianSeries3D)instance;
            return that.XRange;
        }
        private object get_160_CartesianSeries3D_YRange(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.CartesianSeries3D)instance;
            return that.YRange;
        }
        private object get_161_CartesianSeries3D_IsTransposed(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.CartesianSeries3D)instance;
            return that.IsTransposed;
        }
        private void set_161_CartesianSeries3D_IsTransposed(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Charts.CartesianSeries3D)instance;
            that.IsTransposed = (global::System.Boolean)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember xamlMember = null;
            global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Syncfusion.UI.Xaml.Charts.SfChart3D.Series":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.SfChart3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Series", "Syncfusion.UI.Xaml.Charts.ChartSeries3DCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_SfChart3D_Series;
                xamlMember.Setter = set_0_SfChart3D_Series;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeries3D.SegmentSelectionBrush":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeries3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "SegmentSelectionBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_ChartSeries3D_SegmentSelectionBrush;
                xamlMember.Setter = set_1_ChartSeries3D_SegmentSelectionBrush;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeries3D.AdornmentsInfo":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeries3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "AdornmentsInfo", "Syncfusion.UI.Xaml.Charts.ChartAdornmentInfo3D");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_ChartSeries3D_AdornmentsInfo;
                xamlMember.Setter = set_2_ChartSeries3D_AdornmentsInfo;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeries3D.SelectedIndex":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeries3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "SelectedIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_ChartSeries3D_SelectedIndex;
                xamlMember.Setter = set_3_ChartSeries3D_SelectedIndex;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeries3D.SelectionMode":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeries3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "SelectionMode", "Syncfusion.UI.Xaml.Charts.SelectionMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_ChartSeries3D_SelectionMode;
                xamlMember.Setter = set_4_ChartSeries3D_SelectionMode;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.DataCount":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "DataCount", "Int32");
                xamlMember.Getter = get_5_ChartSeriesBase_DataCount;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.IsSortData":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "IsSortData", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_ChartSeriesBase_IsSortData;
                xamlMember.Setter = set_6_ChartSeriesBase_IsSortData;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.SortDirection":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "SortDirection", "Syncfusion.UI.Xaml.Charts.Direction");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_ChartSeriesBase_SortDirection;
                xamlMember.Setter = set_7_ChartSeriesBase_SortDirection;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.SortBy":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "SortBy", "Syncfusion.UI.Xaml.Charts.SortingAxis");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_ChartSeriesBase_SortBy;
                xamlMember.Setter = set_8_ChartSeriesBase_SortBy;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.TooltipTemplate":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "TooltipTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_ChartSeriesBase_TooltipTemplate;
                xamlMember.Setter = set_9_ChartSeriesBase_TooltipTemplate;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.ShowTooltip":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "ShowTooltip", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_ChartSeriesBase_ShowTooltip;
                xamlMember.Setter = set_10_ChartSeriesBase_ShowTooltip;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.ListenPropertyChange":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "ListenPropertyChange", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_ChartSeriesBase_ListenPropertyChange;
                xamlMember.Setter = set_11_ChartSeriesBase_ListenPropertyChange;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.Adornments":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Adornments", "System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartAdornment>");
                xamlMember.Getter = get_12_ChartSeriesBase_Adornments;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAdornment.Series":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAdornment");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Series", "Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember.Getter = get_13_ChartAdornment_Series;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAdornment.Background":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAdornment");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Background", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_ChartAdornment_Background;
                xamlMember.Setter = set_14_ChartAdornment_Background;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAdornment.BorderThickness":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAdornment");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "BorderThickness", "Windows.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_ChartAdornment_BorderThickness;
                xamlMember.Setter = set_15_ChartAdornment_BorderThickness;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAdornment.BorderBrush":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAdornment");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "BorderBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_ChartAdornment_BorderBrush;
                xamlMember.Setter = set_16_ChartAdornment_BorderBrush;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAdornment.Margin":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAdornment");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Margin", "Windows.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_ChartAdornment_Margin;
                xamlMember.Setter = set_17_ChartAdornment_Margin;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAdornment.FontFamily":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAdornment");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "FontFamily", "Windows.UI.Xaml.Media.FontFamily");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_ChartAdornment_FontFamily;
                xamlMember.Setter = set_18_ChartAdornment_FontFamily;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAdornment.FontStyle":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAdornment");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "FontStyle", "Windows.UI.Text.FontStyle");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_ChartAdornment_FontStyle;
                xamlMember.Setter = set_19_ChartAdornment_FontStyle;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAdornment.FontSize":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAdornment");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "FontSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_ChartAdornment_FontSize;
                xamlMember.Setter = set_20_ChartAdornment_FontSize;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAdornment.Foreground":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAdornment");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Foreground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_ChartAdornment_Foreground;
                xamlMember.Setter = set_21_ChartAdornment_Foreground;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAdornment.ConnectorRotationAngle":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAdornment");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "ConnectorRotationAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_ChartAdornment_ConnectorRotationAngle;
                xamlMember.Setter = set_22_ChartAdornment_ConnectorRotationAngle;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAdornment.ConnectorHeight":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAdornment");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "ConnectorHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_ChartAdornment_ConnectorHeight;
                xamlMember.Setter = set_23_ChartAdornment_ConnectorHeight;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAdornment.ActualContent":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAdornment");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "ActualContent", "Object");
                xamlMember.Getter = get_24_ChartAdornment_ActualContent;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAdornment.XData":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAdornment");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "XData", "Double");
                xamlMember.Getter = get_25_ChartAdornment_XData;
                xamlMember.Setter = set_25_ChartAdornment_XData;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAdornment.YData":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAdornment");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "YData", "Double");
                xamlMember.Getter = get_26_ChartAdornment_YData;
                xamlMember.Setter = set_26_ChartAdornment_YData;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAdornment.X":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAdornment");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "X", "Double");
                xamlMember.Getter = get_27_ChartAdornment_X;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAdornment.Y":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAdornment");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Y", "Double");
                xamlMember.Getter = get_28_ChartAdornment_Y;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSegment.XRange":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSegment");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "XRange", "Syncfusion.UI.Xaml.Charts.DoubleRange");
                xamlMember.Getter = get_29_ChartSegment_XRange;
                xamlMember.Setter = set_29_ChartSegment_XRange;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSegment.YRange":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSegment");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "YRange", "Syncfusion.UI.Xaml.Charts.DoubleRange");
                xamlMember.Getter = get_30_ChartSegment_YRange;
                xamlMember.Setter = set_30_ChartSegment_YRange;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSegment.Item":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSegment");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Item", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_ChartSegment_Item;
                xamlMember.Setter = set_31_ChartSegment_Item;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSegment.Interior":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSegment");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Interior", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_ChartSegment_Interior;
                xamlMember.Setter = set_32_ChartSegment_Interior;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSegment.StrokeThickness":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSegment");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "StrokeThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_ChartSegment_StrokeThickness;
                xamlMember.Setter = set_33_ChartSegment_StrokeThickness;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSegment.StrokeDashArray":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSegment");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "StrokeDashArray", "Windows.UI.Xaml.Media.DoubleCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_ChartSegment_StrokeDashArray;
                xamlMember.Setter = set_34_ChartSegment_StrokeDashArray;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSegment.Stroke":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSegment");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Stroke", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_ChartSegment_Stroke;
                xamlMember.Setter = set_35_ChartSegment_Stroke;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.IsSeriesVisible":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "IsSeriesVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_ChartSeriesBase_IsSeriesVisible;
                xamlMember.Setter = set_36_ChartSeriesBase_IsSeriesVisible;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.Palette":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Palette", "Syncfusion.UI.Xaml.Charts.ChartColorPalette");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_ChartSeriesBase_Palette;
                xamlMember.Setter = set_37_ChartSeriesBase_Palette;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.ItemsSource":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "ItemsSource", "System.Collections.IEnumerable");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_ChartSeriesBase_ItemsSource;
                xamlMember.Setter = set_38_ChartSeriesBase_ItemsSource;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.TrackBallLabelTemplate":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "TrackBallLabelTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_39_ChartSeriesBase_TrackBallLabelTemplate;
                xamlMember.Setter = set_39_ChartSeriesBase_TrackBallLabelTemplate;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.Interior":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Interior", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_40_ChartSeriesBase_Interior;
                xamlMember.Setter = set_40_ChartSeriesBase_Interior;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.Label":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Label", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_ChartSeriesBase_Label;
                xamlMember.Setter = set_41_ChartSeriesBase_Label;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.LegendIcon":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "LegendIcon", "Syncfusion.UI.Xaml.Charts.ChartLegendIcon");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_ChartSeriesBase_LegendIcon;
                xamlMember.Setter = set_42_ChartSeriesBase_LegendIcon;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.LegendIconTemplate":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "LegendIconTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_ChartSeriesBase_LegendIconTemplate;
                xamlMember.Setter = set_43_ChartSeriesBase_LegendIconTemplate;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.VisibilityOnLegend":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "VisibilityOnLegend", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_ChartSeriesBase_VisibilityOnLegend;
                xamlMember.Setter = set_44_ChartSeriesBase_VisibilityOnLegend;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.SeriesSelectionBrush":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "SeriesSelectionBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_ChartSeriesBase_SeriesSelectionBrush;
                xamlMember.Setter = set_45_ChartSeriesBase_SeriesSelectionBrush;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.ColorModel":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "ColorModel", "Syncfusion.UI.Xaml.Charts.ChartColorModel");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_ChartSeriesBase_ColorModel;
                xamlMember.Setter = set_46_ChartSeriesBase_ColorModel;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.XBindingPath":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "XBindingPath", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_47_ChartSeriesBase_XBindingPath;
                xamlMember.Setter = set_47_ChartSeriesBase_XBindingPath;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.EnableAnimation":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "EnableAnimation", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_ChartSeriesBase_EnableAnimation;
                xamlMember.Setter = set_48_ChartSeriesBase_EnableAnimation;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.AnimationDuration":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "AnimationDuration", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_49_ChartSeriesBase_AnimationDuration;
                xamlMember.Setter = set_49_ChartSeriesBase_AnimationDuration;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.EmptyPointValue":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "EmptyPointValue", "Syncfusion.UI.Xaml.Charts.EmptyPointValue");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_50_ChartSeriesBase_EmptyPointValue;
                xamlMember.Setter = set_50_ChartSeriesBase_EmptyPointValue;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.EmptyPointStyle":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "EmptyPointStyle", "Syncfusion.UI.Xaml.Charts.EmptyPointStyle");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_51_ChartSeriesBase_EmptyPointStyle;
                xamlMember.Setter = set_51_ChartSeriesBase_EmptyPointStyle;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.EmptyPointSymbolTemplate":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "EmptyPointSymbolTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_52_ChartSeriesBase_EmptyPointSymbolTemplate;
                xamlMember.Setter = set_52_ChartSeriesBase_EmptyPointSymbolTemplate;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.ShowEmptyPoints":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "ShowEmptyPoints", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_53_ChartSeriesBase_ShowEmptyPoints;
                xamlMember.Setter = set_53_ChartSeriesBase_ShowEmptyPoints;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.EmptyPointInterior":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "EmptyPointInterior", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_ChartSeriesBase_EmptyPointInterior;
                xamlMember.Setter = set_54_ChartSeriesBase_EmptyPointInterior;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartSeriesBase.Spacing":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartSeriesBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Spacing", "Double");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_55_ChartSeriesBase_Spacing;
                xamlMember.Setter = set_55_ChartSeriesBase_Spacing;
                break;
            case "Syncfusion.UI.Xaml.Charts.SfChart3D.PerspectiveAngle":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.SfChart3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "PerspectiveAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_56_SfChart3D_PerspectiveAngle;
                xamlMember.Setter = set_56_SfChart3D_PerspectiveAngle;
                break;
            case "Syncfusion.UI.Xaml.Charts.SfChart3D.Rotation":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.SfChart3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Rotation", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_SfChart3D_Rotation;
                xamlMember.Setter = set_57_SfChart3D_Rotation;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBase.SideBySideSeriesPlacement":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "SideBySideSeriesPlacement", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_ChartBase_SideBySideSeriesPlacement;
                xamlMember.Setter = set_58_ChartBase_SideBySideSeriesPlacement;
                break;
            case "Syncfusion.UI.Xaml.Charts.SfChart3D.Depth":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.SfChart3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Depth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_SfChart3D_Depth;
                xamlMember.Setter = set_59_SfChart3D_Depth;
                break;
            case "Syncfusion.UI.Xaml.Charts.SfChart3D.PrimaryAxis":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.SfChart3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "PrimaryAxis", "Syncfusion.UI.Xaml.Charts.ChartAxisBase3D");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_60_SfChart3D_PrimaryAxis;
                xamlMember.Setter = set_60_SfChart3D_PrimaryAxis;
                break;
            case "Syncfusion.UI.Xaml.Charts.SfChart3D.SecondaryAxis":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.SfChart3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "SecondaryAxis", "Syncfusion.UI.Xaml.Charts.RangeAxisBase3D");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_61_SfChart3D_SecondaryAxis;
                xamlMember.Setter = set_61_SfChart3D_SecondaryAxis;
                break;
            case "Syncfusion.UI.Xaml.Charts.SfChart3D.WallSize":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.SfChart3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "WallSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_62_SfChart3D_WallSize;
                xamlMember.Setter = set_62_SfChart3D_WallSize;
                break;
            case "Syncfusion.UI.Xaml.Charts.SfChart3D.EnableRotation":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.SfChart3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "EnableRotation", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_63_SfChart3D_EnableRotation;
                xamlMember.Setter = set_63_SfChart3D_EnableRotation;
                break;
            case "Syncfusion.UI.Xaml.Charts.SfChart3D.EnableSeriesSelection":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.SfChart3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "EnableSeriesSelection", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_64_SfChart3D_EnableSeriesSelection;
                xamlMember.Setter = set_64_SfChart3D_EnableSeriesSelection;
                break;
            case "Syncfusion.UI.Xaml.Charts.SfChart3D.EnableSegmentSelection":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.SfChart3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "EnableSegmentSelection", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_65_SfChart3D_EnableSegmentSelection;
                xamlMember.Setter = set_65_SfChart3D_EnableSegmentSelection;
                break;
            case "Syncfusion.UI.Xaml.Charts.SfChart3D.TopWallBrush":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.SfChart3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "TopWallBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_66_SfChart3D_TopWallBrush;
                xamlMember.Setter = set_66_SfChart3D_TopWallBrush;
                break;
            case "Syncfusion.UI.Xaml.Charts.SfChart3D.BottomWallBrush":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.SfChart3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "BottomWallBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_67_SfChart3D_BottomWallBrush;
                xamlMember.Setter = set_67_SfChart3D_BottomWallBrush;
                break;
            case "Syncfusion.UI.Xaml.Charts.SfChart3D.RightWallBrush":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.SfChart3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "RightWallBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_68_SfChart3D_RightWallBrush;
                xamlMember.Setter = set_68_SfChart3D_RightWallBrush;
                break;
            case "Syncfusion.UI.Xaml.Charts.SfChart3D.LeftWallBrush":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.SfChart3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "LeftWallBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_69_SfChart3D_LeftWallBrush;
                xamlMember.Setter = set_69_SfChart3D_LeftWallBrush;
                break;
            case "Syncfusion.UI.Xaml.Charts.SfChart3D.BackWallBrush":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.SfChart3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "BackWallBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_70_SfChart3D_BackWallBrush;
                xamlMember.Setter = set_70_SfChart3D_BackWallBrush;
                break;
            case "Syncfusion.UI.Xaml.Charts.SfChart3D.Tilt":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.SfChart3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Tilt", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_71_SfChart3D_Tilt;
                xamlMember.Setter = set_71_SfChart3D_Tilt;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBase.AxisThickness":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "AxisThickness", "Windows.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_72_ChartBase_AxisThickness;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBase.SeriesClipRect":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "SeriesClipRect", "Windows.Foundation.Rect");
                xamlMember.Getter = get_73_ChartBase_SeriesClipRect;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBase.VisibleSeries":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "VisibleSeries", "Syncfusion.UI.Xaml.Charts.ChartVisibleSeriesCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_74_ChartBase_VisibleSeries;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBase.Palette":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Palette", "Syncfusion.UI.Xaml.Charts.ChartColorPalette");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_75_ChartBase_Palette;
                xamlMember.Setter = set_75_ChartBase_Palette;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBase.SeriesSelectedIndex":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "SeriesSelectedIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_76_ChartBase_SeriesSelectedIndex;
                xamlMember.Setter = set_76_ChartBase_SeriesSelectedIndex;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBase.ColumnDefinitions":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "ColumnDefinitions", "Syncfusion.UI.Xaml.Charts.ChartColumnDefinitions");
                xamlMember.Getter = get_77_ChartBase_ColumnDefinitions;
                xamlMember.Setter = set_77_ChartBase_ColumnDefinitions;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartColumnDefinition.Width":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartColumnDefinition");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Width", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_78_ChartColumnDefinition_Width;
                xamlMember.Setter = set_78_ChartColumnDefinition_Width;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartColumnDefinition.Unit":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartColumnDefinition");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Unit", "Syncfusion.UI.Xaml.Charts.ChartUnitType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_79_ChartColumnDefinition_Unit;
                xamlMember.Setter = set_79_ChartColumnDefinition_Unit;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartColumnDefinition.BorderThickness":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartColumnDefinition");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "BorderThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_80_ChartColumnDefinition_BorderThickness;
                xamlMember.Setter = set_80_ChartColumnDefinition_BorderThickness;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartColumnDefinition.BorderStroke":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartColumnDefinition");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "BorderStroke", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_81_ChartColumnDefinition_BorderStroke;
                xamlMember.Setter = set_81_ChartColumnDefinition_BorderStroke;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBase.RowDefinitions":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "RowDefinitions", "Syncfusion.UI.Xaml.Charts.ChartRowDefinitions");
                xamlMember.Getter = get_82_ChartBase_RowDefinitions;
                xamlMember.Setter = set_82_ChartBase_RowDefinitions;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartRowDefinition.RowTop":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartRowDefinition");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "RowTop", "Double");
                xamlMember.Getter = get_83_ChartRowDefinition_RowTop;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartRowDefinition.Height":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartRowDefinition");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Height", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_84_ChartRowDefinition_Height;
                xamlMember.Setter = set_84_ChartRowDefinition_Height;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartRowDefinition.Unit":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartRowDefinition");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Unit", "Syncfusion.UI.Xaml.Charts.ChartUnitType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_85_ChartRowDefinition_Unit;
                xamlMember.Setter = set_85_ChartRowDefinition_Unit;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartRowDefinition.BorderThickness":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartRowDefinition");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "BorderThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_86_ChartRowDefinition_BorderThickness;
                xamlMember.Setter = set_86_ChartRowDefinition_BorderThickness;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartRowDefinition.BorderStroke":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartRowDefinition");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "BorderStroke", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_87_ChartRowDefinition_BorderStroke;
                xamlMember.Setter = set_87_ChartRowDefinition_BorderStroke;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBase.Axes":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Axes", "Syncfusion.UI.Xaml.Charts.ChartAxisCollection");
                xamlMember.Getter = get_88_ChartBase_Axes;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.ActualPlotOffset":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "ActualPlotOffset", "Double");
                xamlMember.Getter = get_89_ChartAxis_ActualPlotOffset;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.MaximumLabels":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "MaximumLabels", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_90_ChartAxis_MaximumLabels;
                xamlMember.Setter = set_90_ChartAxis_MaximumLabels;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.VisibleRange":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "VisibleRange", "Syncfusion.UI.Xaml.Charts.DoubleRange");
                xamlMember.Getter = get_91_ChartAxis_VisibleRange;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.ArrangeRect":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "ArrangeRect", "Windows.Foundation.Rect");
                xamlMember.Getter = get_92_ChartAxis_ArrangeRect;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.PositionPath":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "PositionPath", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_93_ChartAxis_PositionPath;
                xamlMember.Setter = set_93_ChartAxis_PositionPath;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.ContentPath":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "ContentPath", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_94_ChartAxis_ContentPath;
                xamlMember.Setter = set_94_ChartAxis_ContentPath;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.LabelFormat":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "LabelFormat", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_95_ChartAxis_LabelFormat;
                xamlMember.Setter = set_95_ChartAxis_LabelFormat;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.LabelsSource":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "LabelsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_96_ChartAxis_LabelsSource;
                xamlMember.Setter = set_96_ChartAxis_LabelsSource;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.PostfixLabelTemplate":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "PostfixLabelTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_97_ChartAxis_PostfixLabelTemplate;
                xamlMember.Setter = set_97_ChartAxis_PostfixLabelTemplate;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.PrefixLabelTemplate":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "PrefixLabelTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_98_ChartAxis_PrefixLabelTemplate;
                xamlMember.Setter = set_98_ChartAxis_PrefixLabelTemplate;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.PlotOffset":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "PlotOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_99_ChartAxis_PlotOffset;
                xamlMember.Setter = set_99_ChartAxis_PlotOffset;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.AxisLineOffset":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "AxisLineOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_100_ChartAxis_AxisLineOffset;
                xamlMember.Setter = set_100_ChartAxis_AxisLineOffset;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.LabelsPosition":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "LabelsPosition", "Syncfusion.UI.Xaml.Charts.AxisElementPosition");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_101_ChartAxis_LabelsPosition;
                xamlMember.Setter = set_101_ChartAxis_LabelsPosition;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.LabelsIntersectAction":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "LabelsIntersectAction", "Syncfusion.UI.Xaml.Charts.AxisLabelsIntersectAction");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_102_ChartAxis_LabelsIntersectAction;
                xamlMember.Setter = set_102_ChartAxis_LabelsIntersectAction;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.LabelExtent":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "LabelExtent", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_103_ChartAxis_LabelExtent;
                xamlMember.Setter = set_103_ChartAxis_LabelExtent;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.LabelRotationAngle":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "LabelRotationAngle", "Double");
                xamlMember.Getter = get_104_ChartAxis_LabelRotationAngle;
                xamlMember.Setter = set_104_ChartAxis_LabelRotationAngle;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.AxisLineStyle":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "AxisLineStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_105_ChartAxis_AxisLineStyle;
                xamlMember.Setter = set_105_ChartAxis_AxisLineStyle;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.OpposedPosition":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "OpposedPosition", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_106_ChartAxis_OpposedPosition;
                xamlMember.Setter = set_106_ChartAxis_OpposedPosition;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.DesiredIntervalsCount":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "DesiredIntervalsCount", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_107_ChartAxis_DesiredIntervalsCount;
                xamlMember.Setter = set_107_ChartAxis_DesiredIntervalsCount;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.ThumbLabelVisibility":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "ThumbLabelVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_108_ChartAxis_ThumbLabelVisibility;
                xamlMember.Setter = set_108_ChartAxis_ThumbLabelVisibility;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.ThumbLabelTemplate":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "ThumbLabelTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_109_ChartAxis_ThumbLabelTemplate;
                xamlMember.Setter = set_109_ChartAxis_ThumbLabelTemplate;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.Header":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_110_ChartAxis_Header;
                xamlMember.Setter = set_110_ChartAxis_Header;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.HeaderStyle":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "HeaderStyle", "Syncfusion.UI.Xaml.Charts.LabelStyle");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_111_ChartAxis_HeaderStyle;
                xamlMember.Setter = set_111_ChartAxis_HeaderStyle;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.HeaderTemplate":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_112_ChartAxis_HeaderTemplate;
                xamlMember.Setter = set_112_ChartAxis_HeaderTemplate;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.TickLineSize":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "TickLineSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_113_ChartAxis_TickLineSize;
                xamlMember.Setter = set_113_ChartAxis_TickLineSize;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.VisibleLabels":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "VisibleLabels", "System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.Charts.ChartAxisLabel>");
                xamlMember.Getter = get_114_ChartAxis_VisibleLabels;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxisLabel.LabelContent":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxisLabel");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "LabelContent", "Object");
                xamlMember.Getter = get_115_ChartAxisLabel_LabelContent;
                xamlMember.Setter = set_115_ChartAxisLabel_LabelContent;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxisLabel.Position":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxisLabel");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Position", "Double");
                xamlMember.Getter = get_116_ChartAxisLabel_Position;
                xamlMember.Setter = set_116_ChartAxisLabel_Position;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxisLabel.PrefixLabelTemplate":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxisLabel");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "PrefixLabelTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_117_ChartAxisLabel_PrefixLabelTemplate;
                xamlMember.Setter = set_117_ChartAxisLabel_PrefixLabelTemplate;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxisLabel.PostfixLabelTemplate":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxisLabel");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "PostfixLabelTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_118_ChartAxisLabel_PostfixLabelTemplate;
                xamlMember.Setter = set_118_ChartAxisLabel_PostfixLabelTemplate;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.IsInversed":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "IsInversed", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_119_ChartAxis_IsInversed;
                xamlMember.Setter = set_119_ChartAxis_IsInversed;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.Origin":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Origin", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_120_ChartAxis_Origin;
                xamlMember.Setter = set_120_ChartAxis_Origin;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.ShowOrigin":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "ShowOrigin", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_121_ChartAxis_ShowOrigin;
                xamlMember.Setter = set_121_ChartAxis_ShowOrigin;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.TickLinesPosition":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "TickLinesPosition", "Syncfusion.UI.Xaml.Charts.AxisElementPosition");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_122_ChartAxis_TickLinesPosition;
                xamlMember.Setter = set_122_ChartAxis_TickLinesPosition;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.ShowAxisNextToOrigin":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "ShowAxisNextToOrigin", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_123_ChartAxis_ShowAxisNextToOrigin;
                xamlMember.Setter = set_123_ChartAxis_ShowAxisNextToOrigin;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.EdgeLabelsDrawingMode":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "EdgeLabelsDrawingMode", "Syncfusion.UI.Xaml.Charts.EdgeLabelsDrawingMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_124_ChartAxis_EdgeLabelsDrawingMode;
                xamlMember.Setter = set_124_ChartAxis_EdgeLabelsDrawingMode;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.EdgeLabelsVisibilityMode":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "EdgeLabelsVisibilityMode", "Syncfusion.UI.Xaml.Charts.EdgeLabelsVisibilityMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_125_ChartAxis_EdgeLabelsVisibilityMode;
                xamlMember.Setter = set_125_ChartAxis_EdgeLabelsVisibilityMode;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.MajorGridLineStyle":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "MajorGridLineStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_126_ChartAxis_MajorGridLineStyle;
                xamlMember.Setter = set_126_ChartAxis_MajorGridLineStyle;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.MinorGridLineStyle":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "MinorGridLineStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_127_ChartAxis_MinorGridLineStyle;
                xamlMember.Setter = set_127_ChartAxis_MinorGridLineStyle;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.MajorTickLineStyle":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "MajorTickLineStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_128_ChartAxis_MajorTickLineStyle;
                xamlMember.Setter = set_128_ChartAxis_MajorTickLineStyle;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.MinorTickLineStyle":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "MinorTickLineStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_129_ChartAxis_MinorTickLineStyle;
                xamlMember.Setter = set_129_ChartAxis_MinorTickLineStyle;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.ShowTrackBallInfo":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "ShowTrackBallInfo", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_130_ChartAxis_ShowTrackBallInfo;
                xamlMember.Setter = set_130_ChartAxis_ShowTrackBallInfo;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.TrackBallLabelTemplate":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "TrackBallLabelTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_131_ChartAxis_TrackBallLabelTemplate;
                xamlMember.Setter = set_131_ChartAxis_TrackBallLabelTemplate;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.CrosshairLabelTemplate":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "CrosshairLabelTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_132_ChartAxis_CrosshairLabelTemplate;
                xamlMember.Setter = set_132_ChartAxis_CrosshairLabelTemplate;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.ShowGridLines":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "ShowGridLines", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_133_ChartAxis_ShowGridLines;
                xamlMember.Setter = set_133_ChartAxis_ShowGridLines;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.EnableAutoIntervalOnZooming":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "EnableAutoIntervalOnZooming", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_134_ChartAxis_EnableAutoIntervalOnZooming;
                xamlMember.Setter = set_134_ChartAxis_EnableAutoIntervalOnZooming;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.LabelStyle":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "LabelStyle", "Syncfusion.UI.Xaml.Charts.LabelStyle");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_135_ChartAxis_LabelStyle;
                xamlMember.Setter = set_135_ChartAxis_LabelStyle;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.LabelTemplate":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "LabelTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_136_ChartAxis_LabelTemplate;
                xamlMember.Setter = set_136_ChartAxis_LabelTemplate;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.CustomLabels":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "CustomLabels", "Syncfusion.UI.Xaml.Charts.ChartAxisLabelCollection");
                xamlMember.Getter = get_137_ChartAxis_CustomLabels;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartAxis.IsLogarithmic":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartAxis");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "IsLogarithmic", "Boolean");
                xamlMember.Getter = get_138_ChartAxis_IsLogarithmic;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBase.Header":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_139_ChartBase_Header;
                xamlMember.Setter = set_139_ChartBase_Header;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBase.HorizontalHeaderAlignment":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "HorizontalHeaderAlignment", "Windows.UI.Xaml.HorizontalAlignment");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_140_ChartBase_HorizontalHeaderAlignment;
                xamlMember.Setter = set_140_ChartBase_HorizontalHeaderAlignment;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBase.VerticalHeaderAlignment":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "VerticalHeaderAlignment", "Windows.UI.Xaml.VerticalAlignment");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_141_ChartBase_VerticalHeaderAlignment;
                xamlMember.Setter = set_141_ChartBase_VerticalHeaderAlignment;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBase.ColorModel":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "ColorModel", "Syncfusion.UI.Xaml.Charts.ChartColorModel");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_142_ChartBase_ColorModel;
                xamlMember.Setter = set_142_ChartBase_ColorModel;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBase.Legend":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Legend", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_143_ChartBase_Legend;
                xamlMember.Setter = set_143_ChartBase_Legend;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBase.Row":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Row", "Int32");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_144_ChartBase_Row;
                xamlMember.Setter = set_144_ChartBase_Row;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBase.Column":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Column", "Int32");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_145_ChartBase_Column;
                xamlMember.Setter = set_145_ChartBase_Column;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBase.ColumnSpan":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "ColumnSpan", "Int32");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_146_ChartBase_ColumnSpan;
                xamlMember.Setter = set_146_ChartBase_ColumnSpan;
                break;
            case "Syncfusion.UI.Xaml.Charts.ChartBase.RowSpan":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.ChartBase");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "RowSpan", "Int32");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_147_ChartBase_RowSpan;
                xamlMember.Setter = set_147_ChartBase_RowSpan;
                break;
            case "Syncfusion.UI.Xaml.Charts.NumericalAxis3D.Interval":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.NumericalAxis3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Interval", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_148_NumericalAxis3D_Interval;
                xamlMember.Setter = set_148_NumericalAxis3D_Interval;
                break;
            case "Syncfusion.UI.Xaml.Charts.NumericalAxis3D.Minimum":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.NumericalAxis3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Minimum", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_149_NumericalAxis3D_Minimum;
                xamlMember.Setter = set_149_NumericalAxis3D_Minimum;
                break;
            case "Syncfusion.UI.Xaml.Charts.NumericalAxis3D.Maximum":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.NumericalAxis3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Maximum", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_150_NumericalAxis3D_Maximum;
                xamlMember.Setter = set_150_NumericalAxis3D_Maximum;
                break;
            case "Syncfusion.UI.Xaml.Charts.NumericalAxis3D.RangePadding":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.NumericalAxis3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "RangePadding", "Syncfusion.UI.Xaml.Charts.NumericalPadding");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_151_NumericalAxis3D_RangePadding;
                xamlMember.Setter = set_151_NumericalAxis3D_RangePadding;
                break;
            case "Syncfusion.UI.Xaml.Charts.NumericalAxis3D.StartRangeFromZero":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.NumericalAxis3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "StartRangeFromZero", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_152_NumericalAxis3D_StartRangeFromZero;
                xamlMember.Setter = set_152_NumericalAxis3D_StartRangeFromZero;
                break;
            case "Syncfusion.UI.Xaml.Charts.RangeAxisBase3D.SmallTicksPerInterval":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.RangeAxisBase3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "SmallTicksPerInterval", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_153_RangeAxisBase3D_SmallTicksPerInterval;
                xamlMember.Setter = set_153_RangeAxisBase3D_SmallTicksPerInterval;
                break;
            case "Syncfusion.UI.Xaml.Charts.RangeAxisBase3D.SmallTickLineSize":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.RangeAxisBase3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "SmallTickLineSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_154_RangeAxisBase3D_SmallTickLineSize;
                xamlMember.Setter = set_154_RangeAxisBase3D_SmallTickLineSize;
                break;
            case "Syncfusion.UI.Xaml.Charts.RangeAxisBase3D.SmallTickLinesPosition":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.RangeAxisBase3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "SmallTickLinesPosition", "Syncfusion.UI.Xaml.Charts.AxisElementPosition");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_155_RangeAxisBase3D_SmallTickLinesPosition;
                xamlMember.Setter = set_155_RangeAxisBase3D_SmallTickLinesPosition;
                break;
            case "Syncfusion.UI.Xaml.Charts.XyDataSeries3D.YBindingPath":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.XyDataSeries3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "YBindingPath", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_156_XyDataSeries3D_YBindingPath;
                xamlMember.Setter = set_156_XyDataSeries3D_YBindingPath;
                break;
            case "Syncfusion.UI.Xaml.Charts.LineSeries3D.StrokeThickness":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.LineSeries3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "StrokeThickness", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_157_LineSeries3D_StrokeThickness;
                xamlMember.Setter = set_157_LineSeries3D_StrokeThickness;
                break;
            case "Syncfusion.UI.Xaml.Charts.LineSeries3D.Segment":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.LineSeries3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "Segment", "Syncfusion.UI.Xaml.Charts.LineSegment3D");
                xamlMember.Getter = get_158_LineSeries3D_Segment;
                xamlMember.Setter = set_158_LineSeries3D_Segment;
                break;
            case "Syncfusion.UI.Xaml.Charts.CartesianSeries3D.XRange":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.CartesianSeries3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "XRange", "Syncfusion.UI.Xaml.Charts.DoubleRange");
                xamlMember.Getter = get_159_CartesianSeries3D_XRange;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.CartesianSeries3D.YRange":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.CartesianSeries3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "YRange", "Syncfusion.UI.Xaml.Charts.DoubleRange");
                xamlMember.Getter = get_160_CartesianSeries3D_YRange;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Charts.CartesianSeries3D.IsTransposed":
                userType = (global::CloudPulse.CloudPulse_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Charts.CartesianSeries3D");
                xamlMember = new global::CloudPulse.CloudPulse_XamlTypeInfo.XamlMember(this, "IsTransposed", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_161_CartesianSeries3D_IsTransposed;
                xamlMember.Setter = set_161_CartesianSeries3D_IsTransposed;
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::CloudPulse.CloudPulse_XamlTypeInfo.XamlSystemBaseType
    {
        global::CloudPulse.CloudPulse_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::CloudPulse.CloudPulse_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::CloudPulse.CloudPulse_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::CloudPulse.CloudPulse_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


